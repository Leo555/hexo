<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PPxu is me</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ppxu.me/"/>
  <updated>2016-09-09T02:55:20.000Z</updated>
  <id>https://ppxu.me/</id>
  
  <author>
    <name>PPxu</name>
    <email>xyang0110@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在Mac上使用Docker配置nginx和node.js</title>
    <link href="https://ppxu.me/2016/09/06/setup-nginx-nodejs-with-docker-in-mac/"/>
    <id>https://ppxu.me/2016/09/06/setup-nginx-nodejs-with-docker-in-mac/</id>
    <published>2016-09-06T11:52:07.000Z</published>
    <updated>2016-09-09T02:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录一下如何在 Mac 上使用 Docker，并配置 nginx 和 node.js 开发环境的操作步骤。</p>
<a id="more"></a>
<p>Mac 上推荐使用官方的安装包来安装 <a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>，这是 <a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="external">下载地址</a>，安装好后运行软件，在菜单栏上就可以看到一只萌萌的鲸鱼了。</p>
<p>我的目标是基于一个 Linux 镜像，安装 nginx 和 node.js，运行一个简单的 node.js 服务器。</p>
<p><a href="https://hub.docker.com/explore/" target="_blank" rel="external">Docker Hub</a> 上有很多官方和非官方的镜像，我选的是官方的 <a href="https://hub.docker.com/_/centos/" target="_blank" rel="external">centos</a>。</p>
<p>下面所有操作都是在命令行中执行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 下载最新 centos 镜像</div><div class="line">$ docker pull centos:latest</div><div class="line"></div><div class="line">// 运行这个镜像，参数说明详见 [reference/commandline](https://docs.docker.com/engine/reference/commandline/)</div><div class="line">$ docker run -it --name web -p 8888:80 centos:latest</div></pre></td></tr></table></figure>
<p>然后命令行就会切换到容器系统的命令行中，下面就是安装 nginx 和 node.js 了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 不更新了，更新会增加几百M镜像体积</span></div><div class="line"><span class="comment"># // 更新包</span></div><div class="line"><span class="comment"># $ yum -y update</span></div><div class="line"></div><div class="line">// 安装 nginx</div><div class="line">$ yum -y install wget</div><div class="line">$ wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line">$ rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line">$ yum -y install nginx</div><div class="line"></div><div class="line">// 修改一下 nginx 配置，转发 node.js 端口</div><div class="line">$ vi /etc/nginx/conf.d/default.conf</div></pre></td></tr></table></figure>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen       <span class="number">80</span>;</div><div class="line">  server_name  localhost;</div><div class="line"></div><div class="line">  location / &#123;</div><div class="line">    proxy_pass        http:<span class="comment">//127.0.0.1:3000/;</span></div><div class="line">    proxy_redirect    off;</div><div class="line">    proxy_set_header  <span class="keyword">X</span>-Real-IP        <span class="variable">$remote_addr</span>;</div><div class="line">    proxy_set_header  <span class="keyword">X</span>-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 启动 nginx</div><div class="line">$ nginx</div></pre></td></tr></table></figure>
<p>下面是手动编译安装 node.js</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 安装依赖</div><div class="line">$ yum -y install gcc-c++</div><div class="line"></div><div class="line">// 下载最新 node.js</div><div class="line">$ wget https://nodejs.org/dist/v6.5.0/node-v6.5.0.tar.gz</div><div class="line"></div><div class="line">// 解压&amp;安装</div><div class="line">$ tar zxf node-v6.5.0.tar.gz</div><div class="line">$ <span class="built_in">cd</span> node-v6.5.0</div><div class="line">$ ./configure</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>node.js 安装好后写一个简单的 server.js</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> http = require(<span class="string">'http'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> server = http.createServer((req, res) =&gt; &#123;</div><div class="line">  res.<span class="built_in">end</span>(<span class="string">'Hello Docker!'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">server.<span class="built_in">listen</span>(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 启动 server</div><div class="line">$ node server.js</div></pre></td></tr></table></figure>
<p>这样子整个流程就跑通了，在浏览器里面访问 <code>http://localhost:8888</code>，就可以看到</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/docker.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/docker.png"></p>
<p>接下来我们还可以把这个修改过的容器保存下来</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 退出容器系统</div><div class="line">$ <span class="built_in">exit</span></div><div class="line"></div><div class="line">// 查看容器信息</div><div class="line">$ docker ps <span class="_">-a</span></div><div class="line"></div><div class="line">// 将容器转化成镜像，ppxu 是 Docker Hub 上的用户名，cnn 是镜像名，v1 是一个 tag</div><div class="line">$ docker commit -m <span class="string">'add nginx &amp; node to centos'</span> <span class="_">-a</span> <span class="string">'ppxu'</span> web ppxu/cnn:v1</div><div class="line"></div><div class="line">// 查看所有的镜像</div><div class="line">$ docker images</div><div class="line"></div><div class="line">// 运行刚刚保存的镜像</div><div class="line">$ docker run -it -p 8888:80 ppxu/cnn:v1</div></pre></td></tr></table></figure>
<p>在这个容器中可以看到刚刚安装的 nginx 和 node.js 都正常运行。</p>
<p>最后我们可以把这个镜像上传到 Docker Hub 中，首先 <a href="https://hub.docker.com/" target="_blank" rel="external">注册帐号</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 用刚注册的帐号登录</div><div class="line">$ docker login</div><div class="line"></div><div class="line">// 上传镜像</div><div class="line">$ docker push ppxu/cnn:v1</div></pre></td></tr></table></figure>
<p>然后就可以在 <a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a> 上看到刚才上传的镜像了，其他人就可以直接使用这个镜像了。</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="https://docs.docker.com/engine/getstarted/" target="_blank" rel="external">https://docs.docker.com/engine/getstarted/</a></li>
<li><a href="http://blog.saymagic.cn/2015/06/01/learning-docker.html#bqlkp" target="_blank" rel="external">http://blog.saymagic.cn/2015/06/01/learning-docker.html#bqlkp</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录一下如何在 Mac 上使用 Docker，并配置 nginx 和 node.js 开发环境的操作步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="mac" scheme="https://ppxu.me/tags/mac/"/>
    
      <category term="docker" scheme="https://ppxu.me/tags/docker/"/>
    
      <category term="nodejs" scheme="https://ppxu.me/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云服务器上安装ShadowSocks服务</title>
    <link href="https://ppxu.me/2016/03/29/install-shadowsocks-service/"/>
    <id>https://ppxu.me/2016/03/29/install-shadowsocks-service/</id>
    <published>2016-03-29T06:55:04.000Z</published>
    <updated>2016-03-29T13:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下如何在服务器上安装科学上网工具ShadowSocks，因为没有国外的主机，只好拿阿里云试试手。</p>
<a id="more"></a>
<h3 id="安装shadowsocks"><a class="header-anchor" href="#安装shadowsocks">¶</a>安装shadowsocks</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ yum install epel-release</div><div class="line">$ yum update</div><div class="line">$ yum install python-setuptools</div><div class="line">$ easy_install pip</div><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure>
<h3 id="配置shadowsocks"><a class="header-anchor" href="#配置shadowsocks">¶</a>配置shadowsocks</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>输入以下内容</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</div><div class="line">  <span class="attr">"server_port"</span>: 端口号,</div><div class="line">  <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</div><div class="line">  <span class="attr">"local_port"</span>: <span class="number">1080</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">" 你的密码"</span>,</div><div class="line">  <span class="attr">"timeout"</span>: <span class="number">500</span>,</div><div class="line">  <span class="attr">"method"</span>:<span class="string">" aes-256-cfb"</span>,</div><div class="line">  <span class="attr">"fast_open"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动服务"><a class="header-anchor" href="#启动服务">¶</a>启动服务</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install python-setuptools supervisor</div><div class="line">$ easy_install pip</div><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure>
<p>加入自动启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/supervisord.conf</div></pre></td></tr></table></figure>
<p>在最后输入</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">[program:shadowsocks]</span></div><div class="line"><span class="attr">command</span>=ssserver -c /etc/shadowsocks.json</div><div class="line"><span class="attr">autostart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">autorestart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">user</span>=root</div></pre></td></tr></table></figure>
<p>刷新</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo chkconfig --add supervisord</div><div class="line">$ sudo chkconfig supervisord on</div><div class="line">$ service supervisord start</div><div class="line">$ supervisorctl reload</div></pre></td></tr></table></figure>
<p>最后，重启一下服务器即可，更多的优化手段可以参考下面链接。</p>
<h4 id="参考"><a class="header-anchor" href="#参考">¶</a>参考</h4>
<ul>
<li><a href="http://www.linexy.net/archives/digitalocean-build-shadowsocks-services-and-optimization-program/" target="_blank" rel="external">http://www.linexy.net/archives/digitalocean-build-shadowsocks-services-and-optimization-program/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下如何在服务器上安装科学上网工具ShadowSocks，因为没有国外的主机，只好拿阿里云试试手。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="shadowsocks" scheme="https://ppxu.me/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Electron快速上手（译）</title>
    <link href="https://ppxu.me/2016/01/31/introduce-to-electron/"/>
    <id>https://ppxu.me/2016/01/31/introduce-to-electron/</id>
    <published>2016-01-31T13:20:40.000Z</published>
    <updated>2016-02-01T15:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>Electron可以让你使用纯JavaScript创建桌面应用程序，它提供了一个包含丰富的原生（操作系统）API的运行时。你可以把它看作是一个Node.js运行时的变体，只不过它是专注于桌面应用程序而不是web服务器。</p>
<p>这并不是说Electron是一个操作图形用户界面（GUI）库的JavaScript工具，实际上，Electron使用网页作为它的GUI，因此你也可以把它看作是一个精简版的Chromium浏览器，通过JavaScript来控制。</p>
<a id="more"></a>
<h3 id="主进程"><a class="header-anchor" href="#主进程">¶</a>主进程</h3>
<p>在Electron中，运行<code>package.json</code>中的<code>main</code>脚本的进程叫作主进程（the main process）。主进程中运行的脚本可以通过创建网页来显示一个GUI界面。</p>
<h3 id="渲染进程"><a class="header-anchor" href="#渲染进程">¶</a>渲染进程</h3>
<p>由于Electron使用Chromium来显示网页，Chromium的多线程架构也用到了。Electron中的每一个网页都在一个独立的进程中运行，即渲染进程（the renderer process）。</p>
<p>在普通的浏览器中，网页通常是在一个沙箱环境中运行，不允许访问本地资源。不过使用Electron就可以在网页中利用Node.js的API来实现一些初级的操作系统交互。</p>
<h3 id="主进程和渲染进程的区别"><a class="header-anchor" href="#主进程和渲染进程的区别">¶</a>主进程和渲染进程的区别</h3>
<p>主进程通过创建<code>BrowserWindow</code>实例来生成网页，每个<code>BrowserWindow</code>实例在它自己的渲染进程中运行网页。当一个<code>BrowserWindow</code>实例销毁时，对应的渲染进程也被终止。</p>
<p>主进程管理所有的网页和它们相对应的渲染进程，每个渲染进程是独立的，只须关心在它上面运行的网页。</p>
<p>在网页中调用原生的GUI相关API是不允许的，因为在网页中管理原生GUI资源是十分危险的，很容易泄露资源。如果你想在网页中操作GUI，该网页的渲染进程必须要和主进程通信，请求在主进程上进行这些操作。</p>
<p>在Electron中，我们提供了<a href="http://electron.atom.io/docs/v0.36.5/api/ipc-renderer" target="_blank" rel="external">ipc</a>模块用来实现主进程和渲染进程之间的通信。另外还有一个<a href="http://electron.atom.io/docs/v0.36.5/api/remote" target="_blank" rel="external">remote</a>模块用来做RPC类型的通信。</p>
<h2 id="编写你的第一个electron应用"><a class="header-anchor" href="#编写你的第一个electron应用">¶</a>编写你的第一个Electron应用</h2>
<p>通常一个Electron应用的结构类似这样：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── main<span class="selector-class">.js</span></div><div class="line">└── index.html</div></pre></td></tr></table></figure>
<p><code>package.json</code>的格式和Node模块完全一样，<code>main</code>字段指定的脚本就是你的应用的启动脚本，它会运行主进程。一个<code>package.json</code>可能类似这样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"your-app"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果<code>package.json</code>中没有指定<code>main</code>字段，Electron会尝试加载<code>index.js</code>。</p>
<p><code>main.js</code>需要创建窗口并且处理系统事件，一个典型的例子如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">'electron'</span>);</div><div class="line"><span class="keyword">const</span> app = electron.app;  <span class="comment">// 控制应用生命周期的模块.</span></div><div class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;  <span class="comment">// 创建原生浏览器窗口的模块.</span></div><div class="line"></div><div class="line"><span class="comment">// 保存窗口对象的一个全局引用，如果你不这么做，当JavaScript对象被垃圾回收后窗口会自动关闭</span></div><div class="line"><span class="keyword">var</span> mainWindow = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// 当所有窗口关闭后退出应用</span></div><div class="line">app.on(<span class="string">'window-all-closed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 在OSX通常会让应用和它的菜单栏保持激活直到用户使用Cmd+Q强制退出</span></div><div class="line">  <span class="keyword">if</span> (process.platform != <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 这个方法会在Electron完成初始化并准备好创建浏览器窗口时调用</span></div><div class="line">app.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建浏览器窗口</span></div><div class="line">  mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;width: <span class="number">800</span>, height: <span class="number">600</span>&#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 加载应用的index.html</span></div><div class="line">  mainWindow.loadURL(<span class="string">'file://'</span> + __dirname + <span class="string">'/index.html'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 打开开发者工具（chromium的控制台）</span></div><div class="line">  mainWindow.webContents.openDevTools();</div><div class="line"></div><div class="line">  <span class="comment">// 当窗口关闭时触发</span></div><div class="line">  mainWindow.on(<span class="string">'closed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 取消对窗口对象的引用，通常如果你的应用支持多窗口，你会将窗口存在一个数组里，这时候你应当删除对应的元素</span></div><div class="line">    mainWindow = <span class="literal">null</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>最后这个<code>index.html</code>就是你想要展现的网页：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    We are using node <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    Chrome <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    and Electron <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="运行你的应用"><a class="header-anchor" href="#运行你的应用">¶</a>运行你的应用</h2>
<p>当你创建完最初的<code>main.js</code>，<code>index.html</code>和<code>package.json</code>文件，你肯定迫不及待想要在本地尝试跑一下你的应用，看看它是不是像预期那样的运行。</p>
<h3 id="electron-prebuilt"><a class="header-anchor" href="#electron-prebuilt">¶</a>electron-prebuilt</h3>
<p>如果你通过<code>npm</code>全局安装了<code>electron-prebuilt</code>，你只需要在你的应用目录下运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron .</div></pre></td></tr></table></figure>
<p>如果你是局部安装的，运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/electron .</div></pre></td></tr></table></figure>
<h3 id="手动下载的electron程序"><a class="header-anchor" href="#手动下载的electron程序">¶</a>手动下载的Electron程序</h3>
<p>如果你是手动下载的Electron，你也可以直接运行你的应用。</p>
<h4 id="windows"><a class="header-anchor" href="#windows">¶</a>Windows</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ .\electron\electron.exe your-app\</div></pre></td></tr></table></figure>
<h4 id="linux"><a class="header-anchor" href="#linux">¶</a>Linux</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./electron/electron your-app/</div></pre></td></tr></table></figure>
<h4 id="osx"><a class="header-anchor" href="#osx">¶</a>OSX</h4>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./Electron.app/Contents/MacOS/Electron your-app/</div></pre></td></tr></table></figure>
<p>这里的<code>Electron.app</code>是Electron发行包中的一部分，你可以在<a href="https://github.com/atom/electron/releases" target="_blank" rel="external">这里</a>下载。</p>
<h3 id="发布应用"><a class="header-anchor" href="#发布应用">¶</a>发布应用</h3>
<p>当你完成了应用的开发，你可以根据<a href="http://electron.atom.io/docs/v0.36.5/tutorial/application-distribution" target="_blank" rel="external">应用发布</a>指南来创建一个发布，并执行打包程序。</p>
<h3 id="尝试这个例子"><a class="header-anchor" href="#尝试这个例子">¶</a>尝试这个例子</h3>
<p>在<a href="https://github.com/atom/electron-quick-start" target="_blank" rel="external">atom/electron-quick-start</a>下载并运行这个教程的代码。</p>
<p><strong>注意</strong>：运行代码需要系统支持<a href="https://git-scm.com/" target="_blank" rel="external">Git</a>和<a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>（含<a href="https://npmjs.org/" target="_blank" rel="external">npm</a>）。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Clone the repository</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/atom/electron-quick-start</div><div class="line"><span class="comment"># Go into the repository</span></div><div class="line">$ <span class="built_in">cd</span> electron-quick-start</div><div class="line"><span class="comment"># Install dependencies and run the app</span></div><div class="line">$ npm install &amp;&amp; npm start</div></pre></td></tr></table></figure>
<p><strong>原文地址</strong>：<a href="http://electron.atom.io/docs/latest/tutorial/quick-start/" target="_blank" rel="external">http://electron.atom.io/docs/latest/tutorial/quick-start/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Electron可以让你使用纯JavaScript创建桌面应用程序，它提供了一个包含丰富的原生（操作系统）API的运行时。你可以把它看作是一个Node.js运行时的变体，只不过它是专注于桌面应用程序而不是web服务器。&lt;/p&gt;
&lt;p&gt;这并不是说Electron是一个操作图形用户界面（GUI）库的JavaScript工具，实际上，Electron使用网页作为它的GUI，因此你也可以把它看作是一个精简版的Chromium浏览器，通过JavaScript来控制。&lt;/p&gt;
    
    </summary>
    
      <category term="nodejs" scheme="https://ppxu.me/categories/nodejs/"/>
    
    
      <category term="nodejs" scheme="https://ppxu.me/tags/nodejs/"/>
    
      <category term="electron" scheme="https://ppxu.me/tags/electron/"/>
    
      <category term="atom" scheme="https://ppxu.me/tags/atom/"/>
    
      <category term="chromium" scheme="https://ppxu.me/tags/chromium/"/>
    
      <category term="app" scheme="https://ppxu.me/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>让Hexo支持emoji表情</title>
    <link href="https://ppxu.me/2015/12/24/enable-emoji-in-hexo/"/>
    <id>https://ppxu.me/2015/12/24/enable-emoji-in-hexo/</id>
    <published>2015-12-24T13:23:43.000Z</published>
    <updated>2015-12-26T14:07:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的文章内容默认是不支持emoji表情的，作为一个有逼格的码农，怎么少得了丰富的表情语言，今天就研究了下怎么支持emoji。</p>
<a id="more"></a>
<p>Hexo默认的markdown编译插件是<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">hexo-renderer-marked</a>，看了一下相关文档，好像没办法支持emoji，还好在Hexo的<a href="https://hexo.io/plugins/" target="_blank" rel="external">plugins</a>页，我们找到了另外一个markdown插件<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="external">hexo-renderer-markdown-it</a>，而且号称速度比默认的还要快，最主要的是，在<a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="external">markdown-it</a>的文档里面，我们发现它可以通过plugins的方式支持<a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="external">emoji</a>。</p>
<p>下面我们就来替换markdown插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /ppxu/blog/</div><div class="line">$ npm un hexo-renderer-marked --save</div><div class="line">$ npm i hexo-renderer-markdown-it --save</div></pre></td></tr></table></figure>
<p>不过此时的hexo-renderer-markdown-it还是用不了emoji的，我们需要加上emoji的plugin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> node_modules/hexo-renderer-markdown-it/</div><div class="line">$ npm install markdown-it-emoji --save</div></pre></td></tr></table></figure>
<p>然后编辑Hexo的配置文件<code>_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">markdown:</span></div><div class="line"><span class="attr">  render:</span></div><div class="line"><span class="attr">    html:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    xhtmlOut:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    breaks:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    linkify:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    typographer:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    quotes:</span> <span class="string">'“”‘’'</span></div><div class="line"><span class="attr">  plugins:</span></div><div class="line"><span class="bullet">    -</span> markdown-it-footnote</div><div class="line"><span class="bullet">    -</span> markdown-it-sup</div><div class="line"><span class="bullet">    -</span> markdown-it-sub</div><div class="line"><span class="bullet">    -</span> markdown-it-abbr</div><div class="line"><span class="bullet">    -</span> markdown-it-emoji</div><div class="line"><span class="attr">  anchors:</span></div><div class="line"><span class="attr">    level:</span> <span class="number">2</span></div><div class="line"><span class="attr">    collisionSuffix:</span> <span class="string">'v'</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    permalinkClass:</span> header-anchor</div><div class="line"><span class="attr">    permalinkSymbol:</span> ¶</div></pre></td></tr></table></figure>
<p>关键就是在plugins里加上<code>- markdown-it-emoji</code>，其他的配置说明可以参见<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration" target="_blank" rel="external">wiki</a>。</p>
<p>重启Hexo服务，即可生效，这里输入<code>:smile: :smirk: :relieved:</code>，效果 😄 😏 😌</p>
<p>当然直接输入表情也是可以的 😂</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo的文章内容默认是不支持emoji表情的，作为一个有逼格的码农，怎么少得了丰富的表情语言，今天就研究了下怎么支持emoji。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="markdown" scheme="https://ppxu.me/tags/markdown/"/>
    
      <category term="emoji" scheme="https://ppxu.me/tags/emoji/"/>
    
  </entry>
  
  <entry>
    <title>平滑升级Nginx并配置HTTP/2</title>
    <link href="https://ppxu.me/2015/12/23/nginx-smooth-upgrade-and-config-http2/"/>
    <id>https://ppxu.me/2015/12/23/nginx-smooth-upgrade-and-config-http2/</id>
    <published>2015-12-23T04:47:40.000Z</published>
    <updated>2015-12-26T14:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前说到SPDY已经被HTTP/2上位了，继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，操作过程如下</p>
<a id="more"></a>
<ol>
<li>检查当前Nginx版本和配置参数</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ nginx -V</div><div class="line">nginx version: nginx/1.8.0</div><div class="line">built by gcc 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC)</div><div class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</div><div class="line">TLS SNI support enabled</div><div class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.2.2 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-http_spdy_module --with-cc-opt=<span class="string">'-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span></div></pre></td></tr></table></figure>
<p>记下这里的configure arguments，后面编译的时候要用的。</p>
<ol start="2">
<li>安装PCRE，Nginx的rewrite模块依赖PCRE</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /ppxu</div><div class="line">$ yum -y install make zlib zlib-devel gcc-c++ libtool</div><div class="line">$ wget http://nchc.dl.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</div><div class="line">$ tar zxvf pcre-8.37.tar.gz</div><div class="line">$ <span class="built_in">cd</span> pcre-8.37/</div><div class="line">$ ./configure</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<ol start="3">
<li>下载OpenSSL，可以从<a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a>或者<a href="http://www.libressl.org/" target="_blank" rel="external">LibreSSL</a>下载</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /ppxu</div><div class="line">$ wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.1.tar.gz</div><div class="line">$ tar zxvf libressl-2.3.1.tar.gz</div></pre></td></tr></table></figure>
<ol start="4">
<li>下载，配置并编译Nginx</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /ppxu</div><div class="line">$ wget http://nginx.org/download/nginx-1.9.9.tar.gz</div><div class="line">$ tar zxvf nginx-1.9.9.tar.gz</div><div class="line">$ <span class="built_in">cd</span> nginx-1.9.9/</div><div class="line">$ ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.3.1 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-cc-opt=<span class="string">'-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span></div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>其中的<code>--with-http_v2_module</code>就是开启HTTP/2的设置。</p>
<ol start="5">
<li>替换Nginx</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">which</span> nginx    //查找nginx路径</div><div class="line">$ mv /usr/sbin/nginx /usr/sbin/nginx.old    //备份旧版nginx</div><div class="line">$ cp objs/nginx /usr/sbin/    //将编译好的新版nginx复制过去</div></pre></td></tr></table></figure>
<ol start="6">
<li>确认更新生效</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</div><div class="line">$ /usr/sbin/nginx -v</div><div class="line">nginx version: nginx/1.9.9</div></pre></td></tr></table></figure>
<ol start="7">
<li>更新Nginx配置文件</li>
</ol>
  <figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    <span class="section">listen</span>       <span class="number">80</span>;</div><div class="line">    <span class="section">listen</span>       <span class="number">443</span> ssl http2;</div><div class="line">    server_name  ppxu.me *.ppxu.me;</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure>
<ol start="8">
<li>重启Nginx即可</li>
</ol>
<p>访问网站，在响应头里可以看到<code>server:nginx/1.9.9</code>，同时，在<a href="chrome://net-internals/#http2" target="_blank" rel="external">chrome://net-internals/#http2</a>上面可以看到网站已经支持了HTTP/2</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/http2.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/http2.png"></p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="http://www.linuxde.net/2011/08/554.html" target="_blank" rel="external">http://www.linuxde.net/2011/08/554.html</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-02/96137.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-02/96137.htm</a></li>
<li><a href="http://www.poluoluo.com/server/201403/265778.html" target="_blank" rel="external">http://www.poluoluo.com/server/201403/265778.html</a></li>
<li><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="external">https://imququ.com/post/http2-resource.html</a></li>
<li><a href="https://imququ.com/post/nginx-http2-patch.html" target="_blank" rel="external">https://imququ.com/post/nginx-http2-patch.html</a></li>
<li><a href="http://www.tuicool.com/articles/3eeIVfi" target="_blank" rel="external">http://www.tuicool.com/articles/3eeIVfi</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前说到SPDY已经被HTTP/2上位了，继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，操作过程如下&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="http2" scheme="https://ppxu.me/tags/http2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置SPDY</title>
    <link href="https://ppxu.me/2015/12/22/config-spdy-in-nginx/"/>
    <id>https://ppxu.me/2015/12/22/config-spdy-in-nginx/</id>
    <published>2015-12-22T09:32:20.000Z</published>
    <updated>2015-12-26T14:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本来准备给服务器搞个HTTP/2上去，发现Nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的Nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级Nginx和HTTP/2。</p>
<a id="more"></a>
<p>首先查看一下本地的Nginx是不是已经包含了SPDY</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx -V |grep spdy</div></pre></td></tr></table></figure>
<p>如果看到有<code>–-with-http_spdy_module</code>，就说明已经支持了SPDY，如果没有的话需要重新下载和编译Nginx，在编译的时候加上<code>--with-http_spdy_module</code>选项。</p>
<p>然后修改Nginx的配置文件</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    listen       <span class="number">443</span> ssl spdy;</div><div class="line">    server_name  ppxu.me *.ppxu.me;</div><div class="line"></div><div class="line">    add_header   Alternate-Protocol  <span class="number">443</span><span class="symbol">:npn-spdy/</span><span class="number">3.1</span>;</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>重启Nginx，SPDY就配置完成了。</p>
<p>访问一下网站，然后在chrome中打开<code>chrome://net-internals/#http2</code>，就可以看到站点已经支持了SPDY3.1</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png"></p>
<p>还可以在这个<a href="https://spdycheck.org/" target="_blank" rel="external">网站</a>检查SPDY情况。</p>
<p>不过毕竟SPDY协议已经废弃了，还是赶紧搞上HTTP/2才是正事。</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li>
<p><a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a></p>
</li>
<li>
<p><a href="http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/" target="_blank" rel="external">http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/</a></p>
</li>
<li>
<p><a href="http://www.linuxidc.com/Linux/2015-09/123251.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-09/123251.htm</a></p>
</li>
<li>
<p><a href="http://www.linuxidc.com/Linux/2015-02/112979.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-02/112979.htm</a></p>
</li>
<li>
<p><a href="http://www.jb51.net/article/59017.htm" target="_blank" rel="external">http://www.jb51.net/article/59017.htm</a></p>
</li>
<li>
<p><a href="http://www.tuicool.com/articles/2mi63q" target="_blank" rel="external">http://www.tuicool.com/articles/2mi63q</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来准备给服务器搞个HTTP/2上去，发现Nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的Nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级Nginx和HTTP/2。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="spdy" scheme="https://ppxu.me/tags/spdy/"/>
    
  </entry>
  
  <entry>
    <title>使用Github的Webhooks实现Hexo的自动部署</title>
    <link href="https://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/"/>
    <id>https://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/</id>
    <published>2015-12-21T09:29:24.000Z</published>
    <updated>2015-12-26T14:01:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。</p>
<a id="more"></a>
<p>整个过程主要有两个环节：</p>
<h3 id="本地代码自动部署到github"><a class="header-anchor" href="#本地代码自动部署到github">¶</a>本地代码自动部署到Github</h3>
<p>Hexo本身就有deploy功能，只要在<code>_config.yml</code>里面做一下<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">配置</a>，就可以部署到Github、Heroku等平台上，如果博客是托管在Github Pages上的话使用这种方式可以很方便的实现自动部署，不过通过这种方式发送到Github上的只有<code>public</code>静态文件目录，我这里希望托管整个应用的代码，就不能使用这种方式了，反正只要可以push就行了，我们搬出shell大法好。</p>
<p>创建文件<code>deploy.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo start \033[0m"</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] hexo generate...  \033[0m"</span></div><div class="line">hexo g</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git commit...  \033[0m"</span></div><div class="line">d=`date +%x-%T`</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"auto deploy at "</span><span class="variable">$&#123;d&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git push...  \033[0m"</span></div><div class="line">git push origin master</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo finish \033[0m"</span></div></pre></td></tr></table></figure>
<p>然后增加权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chmod +x ./deploy.sh</div></pre></td></tr></table></figure>
<p>这样完成本地开发后，只要执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./deploy.sh</div></pre></td></tr></table></figure>
<p>就可以让Hexo生成静态文件并push到Github上。</p>
<h3 id="github自动同步到服务器"><a class="header-anchor" href="#github自动同步到服务器">¶</a>Github自动同步到服务器</h3>
<p>为了让服务器可以自动同步Github上面的更新，我们需要用到Github的Webhooks。</p>
<p>首先创建文件<code>sync.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo start \033[0m"</span></div><div class="line"><span class="built_in">cd</span> /ppxu/blog</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO SYNC] git pull...  \033[0m"</span></div><div class="line">git pull origin master</div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo finish \033[0m"</span></div></pre></td></tr></table></figure>
<p>目标是每当Github有push的时候就自动调用这个脚本。</p>
<p>然后找到Github仓库的Settings页</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png"></p>
<p>添加一条Webhook，填写请求地址<code>http://xx.xx.xx.xx:7777/webhook</code>，这样每当Github收到push或者其他事件时就会自动向这个地址发送一条POST请求。</p>
<p>下面在服务器上补充这个请求地址，我们用Node搭一个简单的http服务，这里用到了<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>处理hook消息，创建文件<code>server.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</div><div class="line"><span class="keyword">var</span> handler = createHandler(&#123; path: <span class="string">'/webhook'</span>, secret: <span class="string">'********'</span> &#125;);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">404</span>;</div><div class="line">    res.end(<span class="string">'no such location'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;).listen(<span class="number">7777</span>);</div><div class="line"></div><div class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</div><div class="line">    event.payload.repository.name,</div><div class="line">    event.payload.ref);</div><div class="line">  exec(<span class="string">'/ppxu/blog/sync.sh'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'sync server err: '</span> + stderr);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(stdout);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的<code>secret</code>要和在Github上新建hook时设置的一样，请求时校验用的。</p>
<p>然后启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node server.js &amp;</div></pre></td></tr></table></figure>
<p>这里也可以用forever之类的工具防止进程挂掉。</p>
<p>这样一套自动部署系统就建立好了，在本机和服务器的实际效果如下：</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png"></p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png"></p>
<p>感觉生活一下子美好起来了呢：）</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li>
<p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></p>
</li>
<li>
<p><a href="https://developer.github.com/webhooks/" target="_blank" rel="external">https://developer.github.com/webhooks/</a></p>
</li>
<li>
<p><a href="http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html" target="_blank" rel="external">http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="github" scheme="https://ppxu.me/tags/github/"/>
    
      <category term="webhooks" scheme="https://ppxu.me/tags/webhooks/"/>
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="deploy" scheme="https://ppxu.me/tags/deploy/"/>
    
      <category term="shell" scheme="https://ppxu.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS配置Nginx和SSL</title>
    <link href="https://ppxu.me/2015/12/20/config-ssl-in-nginx/"/>
    <id>https://ppxu.me/2015/12/20/config-ssl-in-nginx/</id>
    <published>2015-12-20T14:01:05.000Z</published>
    <updated>2015-12-26T13:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天给服务器安装了Nginx，并配置了SSL，网址左边终于有了萌萌哒的小绿锁，这里还是做一下记录。</p>
<a id="more"></a>
<p>先是安装Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line">$ rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
<p>启动Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl start nginx</div></pre></td></tr></table></figure>
<p>这样Nginx服务就已经启动完成了，输入服务器ip地址就可以看到Nginx主页，然后我们需要把Hexo服务的4000端口转发到Nginx的80端口，查看Nginx配置文件<code>/etc/nginx/nginx.conf</code>，看到需要修改<code>conf.d</code>目录下的<code>/etc/nginx/conf.d/default.conf</code>文件</p>
<figure class="highlight tp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       <span class="number">80</span>;</div><div class="line">    server_name  ppxu.me *.ppxu.me;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass          http:<span class="comment">//127.0.0.1:4000/;</span></div><div class="line">        proxy_redirect      off;</div><div class="line">        proxy_set_header    <span class="keyword">X</span>-Real-IP       <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header    <span class="keyword">X</span>-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>重启Nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl restart nginx</div></pre></td></tr></table></figure>
<p>现在访问网站，在响应头里就可以看到<code>Server:nginx/1.8.0</code>，说明Nginx环境已经正常了，下面准备搞上HTTPS。</p>
<p>这里就不详述HTTPS的原理了，对我们这个小博客而言，搞个免费的SSL证书就可以了，这里推荐<a href="https://startssl.com/" target="_blank" rel="external">https://startssl.com/</a>或者<a href="https://www.wosign.com/" target="_blank" rel="external">https://www.wosign.com/</a>，申请成功后把下载下来的对应版本的证书文件上传到服务器上，包含公钥<code>xx.crt</code>和私钥<code>xx.key</code>。</p>
<p>然后编辑<code>/etc/nginx/conf.d/default.conf</code></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    listen       443 ssl;</div><div class="line">    server_name  ppxu.me *.ppxu.me;</div><div class="line"></div><div class="line">    ssl <span class="keyword">on</span>;</div><div class="line">    ssl_certificate /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/ppxu.crt;</div><div class="line">    ssl_certificate_key /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/ppxu.key;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL';</div><div class="line">    ssl_prefer_server_ciphers <span class="keyword">on</span>;</div><div class="line">    ssl_session_cache shared:SSL:10m;</div><div class="line">    ssl_session_timeout 10m;</div><div class="line">    ssl_stapling <span class="keyword">on</span>;</div><div class="line">    ssl_stapling_verify <span class="keyword">on</span>;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass          http:<span class="comment">//127.0.0.1:4000/;</span></div><div class="line">        proxy_redirect      off;</div><div class="line">        proxy_set_header    X-Real-IP       <span class="variable">$remote_addr</span>;</div><div class="line">        proxy_set_header    X-Forwarded-<span class="keyword">For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>重启Nginx，如果一切顺利，现在就可以通过<code>https://ppxu.me</code>访问到本网站了，但是如果直接输入<code>ppxu.me</code>的话会报400错误，显示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The plain HTTP request was sent to HTTPS port</div></pre></td></tr></table></figure>
<p>所以我们需要将http的请求强制使用https访问，最方便的办法是启用HSTS，在nginx的配置中添加</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">add_header </span><span class="keyword">Strict-Transport-Security </span><span class="string">"max-age=31536000; includeSubdomains"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这样只要是支持HSTS的浏览器，就可以自动完成http到https的替换，而且是直接在浏览器本地完成的，对于不支持的浏览器，只能在服务器做重定向了，继续在Nginx配置中添加一条规则</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">error_page</span> <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$uri</span>;</div></pre></td></tr></table></figure>
<p>这样我们的网站就已经完全支持了HTTPS访问，可以在这个网站<a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="external">https://www.ssllabs.com/ssltest/analyze.html</a>对网页进行安全评测，如果评分不够高的话可以再看看如何<a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">加强nginx的SSL安全</a>。</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png"></p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="http://codybonney.com/installing-nginx-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-nginx-on-centos-6-4/</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/" target="_blank" rel="external">http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/</a></li>
<li><a href="https://imququ.com/post/switch-to-https.html" target="_blank" rel="external">https://imququ.com/post/switch-to-https.html</a></li>
<li><a href="https://imququ.com/post/sth-about-switch-to-https.html" target="_blank" rel="external">https://imququ.com/post/sth-about-switch-to-https.html</a></li>
<li><a href="http://www.ha97.com/5194.html" target="_blank" rel="external">http://www.ha97.com/5194.html</a></li>
<li><a href="http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html" target="_blank" rel="external">http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html</a></li>
<li><a href="http://www.codeceo.com/article/nginx-ssl-nodejs.html" target="_blank" rel="external">http://www.codeceo.com/article/nginx-ssl-nodejs.html</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-node-js/" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-node-js/</a></li>
<li><a href="http://blog.csdn.net/wzy_1988/article/details/8549290" target="_blank" rel="external">http://blog.csdn.net/wzy_1988/article/details/8549290</a></li>
<li><a href="http://www.tutugreen.com/wordpress/upgrade-ssl/" target="_blank" rel="external">http://www.tutugreen.com/wordpress/upgrade-ssl/</a></li>
<li><a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">http://www.oschina.net/translate/strong_ssl_security_on_nginx</a></li>
<li><a href="http://blog.jobbole.com/44844/" target="_blank" rel="external">http://blog.jobbole.com/44844/</a></li>
<li><a href="http://blog.jobbole.com/80591/" target="_blank" rel="external">http://blog.jobbole.com/80591/</a></li>
<li><a href="https://imququ.com/post/my-nginx-conf-for-wpo.html" target="_blank" rel="external">https://imququ.com/post/my-nginx-conf-for-wpo.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给服务器安装了Nginx，并配置了SSL，网址左边终于有了萌萌哒的小绿锁，这里还是做一下记录。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="ssl" scheme="https://ppxu.me/tags/ssl/"/>
    
      <category term="https" scheme="https://ppxu.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS搭建Hexo博客</title>
    <link href="https://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/"/>
    <id>https://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/</id>
    <published>2015-12-19T02:31:27.000Z</published>
    <updated>2015-12-26T13:54:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。</p>
<a id="more"></a>
<p>撸主选的是最便宜的阿里云ECS，应付日常小撸妥妥的，具体配置如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CPU：<span class="number">1</span>核</div><div class="line">内存：<span class="number">1024</span>MB</div><div class="line">操作系统：CentOS <span class="number">7.2</span> <span class="number">64</span>位</div><div class="line">带宽：<span class="number">1</span>Mbps</div></pre></td></tr></table></figure>
<p>下面是具体的步骤：</p>
<ul>
<li>连接服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh root@xx.xx.xx.xx</div></pre></td></tr></table></figure>
<ul>
<li>
<p>安装Nodejs环境</p>
<ul>
<li>更新软件源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y update</div></pre></td></tr></table></figure>
<ul>
<li>下载Node.js</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">$ wget http://nodejs.org/dist/node-latest.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar zxf node-latest.tar.gz</div><div class="line">$ <span class="built_in">cd</span> node-v*.*.*</div></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ./configure</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<ul>
<li>确认安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">$ npm -v</div></pre></td></tr></table></figure>
</li>
<li>
<p>安装Hexo</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div><div class="line">$ hexo init blog</div><div class="line">$ <span class="built_in">cd</span> blog</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<ul>
<li>启动Hexo</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo server    //普通启动</div><div class="line">$ hexo server &amp;  //静默启动</div></pre></td></tr></table></figure>
<p>启动成功后就可以通过服务器的ip地址<code>xx.xx.xx.xx:4000</code>访问到页面了，然后把4000转到80上，通常做法是用Nginx做反向代理，这里先用iptables防火墙简单做一下转发处理。</p>
<ul>
<li>转到80端口</li>
</ul>
<p>编辑iptables文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>
<p>加上下面这段</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT</div><div class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">4000</span> -j ACCEPT</div><div class="line"></div><div class="line">*nat</div><div class="line">-A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-ports <span class="number">4000</span></div><div class="line">COMMIT</div></pre></td></tr></table></figure>
<p>重启iptables服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service iptables restart</div></pre></td></tr></table></figure>
<p>这时发现报错了</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed <span class="built_in">to</span> restart iptables.service: Unit iptables.service failed <span class="built_in">to</span> <span class="built_in">load</span>: No such <span class="built_in">file</span> <span class="keyword">or</span> <span class="built_in">directory</span>.</div></pre></td></tr></table></figure>
<p>查了一下原来是CentOS 7中的防火墙改成了firewalld，这里先换回iptables。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ systemctl stop firewalld</div><div class="line">$ systemctl mask firewalld</div><div class="line">$ yum install iptables-services</div><div class="line">$ systemctl <span class="built_in">enable</span> iptables</div><div class="line">$ service start iptables</div></pre></td></tr></table></figure>
<p>这样就可以通过ip地址<code>xx.xx.xx.xx</code>直接访问网站了。</p>
<ul>
<li>域名解析</li>
</ul>
<p>再撸个域名<code>ppxu.me</code>，把<code>@</code>和<code>www</code>都解析到服务器ip地址就可以了。</p>
<ul>
<li>git管理</li>
</ul>
<p>再配置一下git环境，以后就可以通过git来管理内容了。</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/index.html</a></li>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">http://wsgzao.github.io/post/hexo-guide/</a></li>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li><a href="http://www.jianshu.com/p/73779eacb494" target="_blank" rel="external">http://www.jianshu.com/p/73779eacb494</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/</a></li>
<li><a href="http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/" target="_blank" rel="external">http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/</a></li>
<li><a href="http://www.vkilo.com/rhel-7-iptables-service.html" target="_blank" rel="external">http://www.vkilo.com/rhel-7-iptables-service.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="nodejs" scheme="https://ppxu.me/tags/nodejs/"/>
    
      <category term="blog" scheme="https://ppxu.me/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ppxu.me/2015/12/18/hello-world/"/>
    <id>https://ppxu.me/2015/12/18/hello-world/</id>
    <published>2015-12-18T14:31:17.000Z</published>
    <updated>2015-12-18T14:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a class="header-anchor" href="#quick-start">¶</a>Quick Start</h2>
<h3 id="create-a-new-post"><a class="header-anchor" href="#create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a class="header-anchor" href="#run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a class="header-anchor" href="#generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="header-anchor" href="#deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
