<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[PPxu is me]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ppxu.me/"/>
  <updated>2015-12-21T13:28:41.000Z</updated>
  <id>http://ppxu.me/</id>
  
  <author>
    <name><![CDATA[PPxu]]></name>
    <email><![CDATA[xyang0110@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Github的Webhooks实现hexo的自动部署]]></title>
    <link href="http://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/"/>
    <id>http://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/</id>
    <published>2015-12-21T09:29:24.000Z</published>
    <updated>2015-12-21T13:28:41.000Z</updated>
    <content type="html"><![CDATA[<p>博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，pull下来，每次都要这样操作一遍实在麻烦，今天尝试使用Github的Webhooks功能实现了hexo的自动部署，过程记录如下。</p>
<a id="more"></a>
<p>整个过程有两个环节：</p>
<h3 id="u672C_u5730_u4EE3_u7801_u81EA_u52A8_u90E8_u7F72_u5230Github"><a href="#u672C_u5730_u4EE3_u7801_u81EA_u52A8_u90E8_u7F72_u5230Github" class="headerlink" title="本地代码自动部署到Github"></a>本地代码自动部署到Github</h3><p>hexo本身就有deploy功能，只要在<code>_config.yml</code>里面做一下<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">配置</a>，就可以部署到Github、Heroku等平台上，如果博客是托管在Github Pages上的话使用这种方式可以很方便的实现自动部署，不过通过这种方式发送到Github上的只有<code>public</code>目录，我这里希望托管整个应用的代码，就不能使用这种方式了，反正只要可以push就行了，我们搬出shell大法好。</p>
<p>创建文件<code>deploy.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo start \033[0m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] hexo generate...  \033[0m"</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git commit...  \033[0m"</span></span><br><span class="line">d=`date +%x-%T`</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"auto deploy at "</span><span class="variable">$&#123;d&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git push...  \033[0m"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo finish \033[0m"</span></span><br></pre></td></tr></table></figure>
<p>然后增加权限</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chmod</span> +<span class="keyword">x</span> ./deploy.sh</span><br></pre></td></tr></table></figure>
<p>这样完成本地开发后，只要执行命令</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./deploy.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>就可以让hexo生成静态文件并push到Github上。</p>
<h3 id="Github_u81EA_u52A8_u540C_u6B65_u5230_u670D_u52A1_u5668"><a href="#Github_u81EA_u52A8_u540C_u6B65_u5230_u670D_u52A1_u5668" class="headerlink" title="Github自动同步到服务器"></a>Github自动同步到服务器</h3><p>为了让服务器可以自动同步Github上面的更新，我们需要用到Github的Webhooks。</p>
<p>首先创建文件<code>sync.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo start \033[0m"</span></span><br><span class="line"><span class="built_in">cd</span> /ppxu/blog</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] git pull...  \033[0m"</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo finish \033[0m"</span></span><br></pre></td></tr></table></figure>
<p>目标是每当Github有push的时候就自动调用这个脚本。</p>
<p>然后找到Github仓库的Settings页</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png"></p>
<p>添加一条Webhook，填写请求地址<code>http://xx.xx.xx.xx:7777/webhook</code>，这样每当Github收到push或者其他事件时就会自动向这个地址发送一条POST请求。</p>
<p>下面在服务器上补充这个请求地址，我们用node搭一个简单的http服务，这里用到了<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>处理hook消息，创建文件<code>server.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; path: <span class="string">'/webhook'</span>, secret: <span class="string">'********'</span> &#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    res.end(<span class="string">'no such location'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">  exec(<span class="string">'/ppxu/blog/sync.sh'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'sync server err: '</span> + stderr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里的<code>secret</code>要和在Github上新建hook时设置的一样，请求时校验用的。</p>
<p>然后启动服务</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span><span class="identifier"> </span><span class="title">server</span>.js &amp;</span><br></pre></td></tr></table></figure>
<p>这里也可以用forever之类的工具防止进程挂掉。</p>
<p>这样一套自动部署系统就建立好了，在本机和服务器的实际效果如下：</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png"></p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png"></p>
<p>感觉生活一下子美好起来了呢：）</p>
<h4 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></p>
</li>
<li><p><a href="https://developer.github.com/webhooks/" target="_blank" rel="external">https://developer.github.com/webhooks/</a></p>
</li>
<li><p><a href="http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html" target="_blank" rel="external">http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，pull下来，每次都要这样操作一遍实在麻烦，今天尝试使用Github的Webhooks功能实现了hexo的自动部署，过程记录如下。</p>]]>
    
    </summary>
    
      <category term="deploy" scheme="http://ppxu.me/tags/deploy/"/>
    
      <category term="github" scheme="http://ppxu.me/tags/github/"/>
    
      <category term="hexo" scheme="http://ppxu.me/tags/hexo/"/>
    
      <category term="shell" scheme="http://ppxu.me/tags/shell/"/>
    
      <category term="webhooks" scheme="http://ppxu.me/tags/webhooks/"/>
    
      <category term="blog" scheme="http://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置nginx和ssl]]></title>
    <link href="http://ppxu.me/2015/12/20/config-ssl-in-nginx/"/>
    <id>http://ppxu.me/2015/12/20/config-ssl-in-nginx/</id>
    <published>2015-12-20T14:01:05.000Z</published>
    <updated>2015-12-21T03:32:38.000Z</updated>
    <content type="html"><![CDATA[<p>今天给服务器安装了nginx，并配置了ssl，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。</p>
<a id="more"></a>
<p>先是安装nginx</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span><br><span class="line">rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0</span><span class="class">.el7</span><span class="class">.ngx</span><span class="class">.noarch</span><span class="class">.rpm</span></span><br><span class="line">yum install nginx</span><br></pre></td></tr></table></figure>
<p>启动nginx</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> nginx</span><br></pre></td></tr></table></figure>
<p>这样nginx服务就已经可以访问了，输入服务器ip地址就可以看到nginx主页，然后我们需要把hexo服务的4000端口转发到nginx的80端口，查看nginx配置文件<code>/etc/nginx/nginx.conf</code>，看到需要修改<code>conf.d</code>目录下的<code>/etc/nginx/conf.d/default.conf</code>文件</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  ppxu.me *.ppxu.me;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass          http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">4000</span>/;</span><br><span class="line">        proxy_redirect      off;</span><br><span class="line">        proxy_set_header    X-Real-IP       <span class="variable">$remote</span>_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">systemctl</span> restart nginx</span><br></pre></td></tr></table></figure>
<p>现在访问网站，在响应头里就可以看到<code>Server:nginx/1.8.0</code>，说明nginx环境已经正常了，下面准备搞上HTTPS。</p>
<p>这里就不详述HTTPS的原理了，对我们这个小博客而言，搞个免费的SSL证书就可以了，这里推荐<a href="https://startssl.com/" target="_blank" rel="external">https://startssl.com/</a>或者<a href="https://www.wosign.com/" target="_blank" rel="external">https://www.wosign.com/</a>，申请成功后把下载下来的对应版本的证书文件上传到服务器上，包含公钥<code>.crt</code>和私钥<code>.key</code>。</p>
<p>然后编辑<code>/etc/nginx/conf.d/default.conf</code></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    listen       443 ssl<span class="comment">;</span></span><br><span class="line">    server_name  ppxu.me *.ppxu.me<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    ssl on<span class="comment">;</span></span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/ppxu.crt<span class="comment">;</span></span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/ppxu.key<span class="comment">;</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="comment">;</span></span><br><span class="line">    ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL'<span class="comment">;</span></span><br><span class="line">    ssl_prefer_server_ciphers on<span class="comment">;</span></span><br><span class="line">    ssl_session_cache shared:SSL:10m<span class="comment">;</span></span><br><span class="line">    ssl_session_timeout 10m<span class="comment">;</span></span><br><span class="line">    ssl_stapling on<span class="comment">;</span></span><br><span class="line">    ssl_stapling_verify on<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass          http://<span class="number">127.0.0.1</span>:4000/<span class="comment">;</span></span><br><span class="line">        proxy_redirect      off<span class="comment">;</span></span><br><span class="line">        proxy_set_header    X-Real-IP       $remote_addr<span class="comment">;</span></span><br><span class="line">        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>重启nginx，如果一切顺利，现在就可以通过<code>https://ppxu.me</code>访问到本网站了，但是直接如果直接输入<code>ppxu.me</code>的话会报400错误，显示</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">The</span> plain <span class="type">HTTP</span> request was sent to <span class="type">HTTPS</span> <span class="foreign"><span class="keyword">port</span></span></span><br></pre></td></tr></table></figure>
<p>所以我们需要将http的请求强制使用https访问，这里有一个方法是使用497错误码做重定向，在<code>/etc/nginx/conf.d/default.conf</code>中添加一条错误规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$uri</span>;</span><br></pre></td></tr></table></figure>
<p>这样我们的网站就已经完全支持了HTTPS访问，可以在这个网站<a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="external">https://www.ssllabs.com/ssltest/analyze.html</a>对网页进行安全评测，如果评分不够高的话可以再看看如何<a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">加强nginx的SSL安全</a>。</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png"></p>
<h4 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="http://codybonney.com/installing-nginx-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-nginx-on-centos-6-4/</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/" target="_blank" rel="external">http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/</a></li>
<li><a href="http://www.ha97.com/5194.html" target="_blank" rel="external">http://www.ha97.com/5194.html</a></li>
<li><a href="http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html" target="_blank" rel="external">http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html</a></li>
<li><a href="http://www.codeceo.com/article/nginx-ssl-nodejs.html" target="_blank" rel="external">http://www.codeceo.com/article/nginx-ssl-nodejs.html</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-node-js/" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-node-js/</a></li>
<li><a href="http://blog.csdn.net/wzy_1988/article/details/8549290" target="_blank" rel="external">http://blog.csdn.net/wzy_1988/article/details/8549290</a></li>
<li><a href="http://www.tutugreen.com/wordpress/upgrade-ssl/" target="_blank" rel="external">http://www.tutugreen.com/wordpress/upgrade-ssl/</a></li>
<li><a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">http://www.oschina.net/translate/strong_ssl_security_on_nginx</a></li>
<li><a href="http://blog.jobbole.com/44844/" target="_blank" rel="external">http://blog.jobbole.com/44844/</a></li>
<li><a href="http://blog.jobbole.com/80591/" target="_blank" rel="external">http://blog.jobbole.com/80591/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天给服务器安装了nginx，并配置了ssl，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="http://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="http://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="http://ppxu.me/tags/ecs/"/>
    
      <category term="https" scheme="http://ppxu.me/tags/https/"/>
    
      <category term="nginx" scheme="http://ppxu.me/tags/nginx/"/>
    
      <category term="ssl" scheme="http://ppxu.me/tags/ssl/"/>
    
      <category term="blog" scheme="http://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里云ECS搭建hexo]]></title>
    <link href="http://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/"/>
    <id>http://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/</id>
    <published>2015-12-19T02:31:27.000Z</published>
    <updated>2015-12-21T02:27:47.000Z</updated>
    <content type="html"><![CDATA[<p>最近刚撸了个阿里云ECS服务器来折腾，先搭个hexo博客耍耍，这里记录一下操作步骤。</p>
<a id="more"></a>
<p>撸主选的是最便宜的阿里云ECS，应付日常小撸应该足够了，具体配置如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU：<span class="number">1</span>核</span><br><span class="line">内存：<span class="number">1024</span>MB</span><br><span class="line">操作系统：CentOS <span class="number">7.0</span> <span class="number">64</span>位</span><br><span class="line">带宽：<span class="number">1</span>Mbps</span><br></pre></td></tr></table></figure>
<p>下面是具体的手法：</p>
<ul>
<li>连接服务器</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xx<span class="class">.xx</span><span class="class">.xx</span><span class="class">.xx</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>安装Nodejs环境</p>
<ul>
<li>更新软件源</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">yum</span> -y update</span><br></pre></td></tr></table></figure>
<ul>
<li>下载Nodejs</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget http://nodejs.org/dist/<span class="keyword">node</span><span class="identifier"></span><span class="title">-latest</span>.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxf <span class="keyword">node</span><span class="identifier"></span><span class="title">-latest</span>.tar.gz</span><br><span class="line">cd <span class="keyword">node</span><span class="identifier"></span><span class="title">-v</span>*.*.*</span><br></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>
<ul>
<li>确认安装成功</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span><span class="identifier"> </span><span class="title">-v</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm <span class="keyword">install</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动hexo</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span>    <span class="comment">//普通启动</span></span><br><span class="line">hexo <span class="keyword">server</span> &amp;  <span class="comment">//静默启动</span></span><br></pre></td></tr></table></figure>
<p>启动成功后就可以通过服务器的ip地址<code>xx.xx.xx.xx:4000</code>访问到页面了，然后需要把4000转到80上，通常做法是用nginx做反向代理，这里先用iptables防火墙简单做一下转发处理。</p>
<ul>
<li>转到80端口</li>
</ul>
<p>编辑iptables文件</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/iptables</span></span><br></pre></td></tr></table></figure>
<p>加上下面这段</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">4000</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">-A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-ports <span class="number">4000</span></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>
<p>重启iptables服务</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">service</span> iptables restart</span><br></pre></td></tr></table></figure>
<p>这时发现报错了</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="built_in">to</span> restart iptables.service: Unit iptables.service failed <span class="built_in">to</span> <span class="built_in">load</span>: No such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span>.</span><br></pre></td></tr></table></figure>
<p>查了一下原来是CentOS 7中的防火墙改成了firewalld，所以要换回iptables。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="operator"><span class="keyword">stop</span> firewalld</span><br><span class="line">systemctl <span class="keyword">mask</span> firewalld</span><br><span class="line">yum <span class="keyword">install</span> iptables-services</span><br><span class="line">systemctl <span class="keyword">enable</span> iptables</span><br><span class="line">service iptables <span class="keyword">start</span></span></span><br></pre></td></tr></table></figure>
<p>这样就可以通过ip地址<code>xx.xx.xx.xx</code>直接访问网站了。</p>
<ul>
<li>域名解析</li>
</ul>
<p>再撸个域名<code>ppxu.me</code>，把<code>@</code>和<code>www</code>都解析到服务器ip地址就可以了。</p>
<ul>
<li>git管理</li>
</ul>
<p>再配置一下git环境，以后就可以通过git来管理内容了。</p>
<h4 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/index.html</a></li>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">http://wsgzao.github.io/post/hexo-guide/</a></li>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li><a href="http://www.jianshu.com/p/73779eacb494" target="_blank" rel="external">http://www.jianshu.com/p/73779eacb494</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/</a></li>
<li><a href="http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/" target="_blank" rel="external">http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/</a></li>
<li><a href="http://www.vkilo.com/rhel-7-iptables-service.html" target="_blank" rel="external">http://www.vkilo.com/rhel-7-iptables-service.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近刚撸了个阿里云ECS服务器来折腾，先搭个hexo博客耍耍，这里记录一下操作步骤。</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="http://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="http://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="http://ppxu.me/tags/ecs/"/>
    
      <category term="hexo" scheme="http://ppxu.me/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://ppxu.me/tags/nodejs/"/>
    
      <category term="blog" scheme="http://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://ppxu.me/2015/12/18/hello-world/"/>
    <id>http://ppxu.me/2015/12/18/hello-world/</id>
    <published>2015-12-18T14:31:17.000Z</published>
    <updated>2015-12-18T14:31:17.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
