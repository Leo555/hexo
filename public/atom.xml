<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[PPxu is me]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://ppxu.me/"/>
  <updated>2015-12-25T02:45:15.000Z</updated>
  <id>https://ppxu.me/</id>
  
  <author>
    <name><![CDATA[PPxu]]></name>
    <email><![CDATA[xyang0110@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[让Hexo支持emoji表情]]></title>
    <link href="https://ppxu.me/2015/12/24/enable-emoji-in-hexo/"/>
    <id>https://ppxu.me/2015/12/24/enable-emoji-in-hexo/</id>
    <published>2015-12-24T13:23:43.000Z</published>
    <updated>2015-12-25T02:45:15.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo的文章内容默认是不支持emoji表情的，为了让文章更生动，今天就研究了下怎么支持emoji。</p>
<a id="more"></a>
<p>Hexo默认的markdown编译插件是<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="external">hexo-renderer-marked</a>，看了一下相关文档，好像没办法支持emoji，还好在Hexo的<a href="https://hexo.io/plugins/" target="_blank" rel="external">plugins</a>页，我们找到了另外一个markdown插件<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="external">hexo-renderer-markdown-it</a>，而且号称速度比默认的还要快，最主要的是，在<a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="external">markdown-it</a>的文档里面，我们发现它可以通过plugins的方式支持<a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="external">emoji</a>。</p>
<p>下面我们就来替换markdown插件</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /ppxu/blog/</span></span><br><span class="line"><span class="preprocessor"># cnpm un hexo-renderer-marked --save</span></span><br><span class="line"><span class="preprocessor"># cnpm i hexo-renderer-markdown-it --save</span></span><br></pre></td></tr></table></figure>
<p>不过此时的hexo-renderer-markdown-it还是用不了emoji的，我们需要加上emoji的plugin</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd node_modules/hexo-renderer-markdown-it/</span></span><br><span class="line"><span class="preprocessor"># cnpm install markdown-it-emoji --save</span></span><br></pre></td></tr></table></figure>
<p>然后编辑Hexo的配置文件<code>_config.yml</code></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">markdown</span>:</span><br><span class="line">  <span class="attribute">render</span>:</span><br><span class="line">    <span class="attribute">html</span>: true</span><br><span class="line">    <span class="attribute">xhtmlOut</span>: false</span><br><span class="line">    <span class="attribute">breaks</span>: false</span><br><span class="line">    <span class="attribute">linkify</span>: true</span><br><span class="line">    <span class="attribute">typographer</span>: true</span><br><span class="line">    <span class="attribute">quotes</span>: <span class="string">'“”‘’'</span></span><br><span class="line">  <span class="attribute">plugins</span>:</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-emoji</span><br><span class="line">  <span class="attribute">anchors</span>:</span><br><span class="line">    <span class="attribute">level</span>: <span class="number">2</span></span><br><span class="line">    <span class="attribute">collisionSuffix</span>: <span class="string">'v'</span></span><br><span class="line">    <span class="attribute">permalink</span>: true</span><br><span class="line">    <span class="attribute">permalinkClass</span>: header-anchor</span><br><span class="line">    <span class="attribute">permalinkSymbol</span>: ¶</span><br></pre></td></tr></table></figure>
<p>关键就是在plugins里加上<code>- markdown-it-emoji</code>，其他的配置说明可以参见<a href="https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki/Advanced-Configuration" target="_blank" rel="external">wiki</a>。</p>
<p>重启Hexo服务，即可生效，这里输入<code>:smile: :smirk: :relieved:</code>，效果 😄 😏 😌</p>
<p>当然直接输入表情也是可以的 😂</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Hexo的文章内容默认是不支持emoji表情的，为了让文章更生动，今天就研究了下怎么支持emoji。</p>]]>
    
    </summary>
    
      <category term="emoji" scheme="https://ppxu.me/tags/emoji/"/>
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="markdown" scheme="https://ppxu.me/tags/markdown/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[平滑升级Nginx并配置HTTP/2]]></title>
    <link href="https://ppxu.me/2015/12/23/nginx-smooth-upgrade-and-config-http2/"/>
    <id>https://ppxu.me/2015/12/23/nginx-smooth-upgrade-and-config-http2/</id>
    <published>2015-12-23T04:47:40.000Z</published>
    <updated>2015-12-24T13:26:42.000Z</updated>
    <content type="html"><![CDATA[<p>话说SPDY已经被HTTP/2上位了，网站继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，下面是操作过程</p>
<a id="more"></a>
<ol>
<li>检查当前Nginx版本和配置参数</li>
</ol>
  <figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx -V</span></span><br><span class="line">nginx <span class="symbol">version:</span> nginx/<span class="number">1.8</span>.<span class="number">0</span></span><br><span class="line">built by gcc <span class="number">4.8</span>.<span class="number">2</span> <span class="number">20140120</span> (<span class="constant">Red</span> <span class="constant">Hat</span> <span class="number">4.8</span>.<span class="number">2</span>-<span class="number">16</span>) (<span class="constant">GCC</span>)</span><br><span class="line">built <span class="keyword">with</span> <span class="constant">OpenSSL</span> <span class="number">1.0</span>.<span class="number">1</span>e-fips <span class="number">11</span> <span class="constant">Feb</span> <span class="number">2013</span></span><br><span class="line"><span class="constant">TLS</span> <span class="constant">SNI</span> support enabled</span><br><span class="line">configure <span class="symbol">arguments:</span> --prefix=<span class="regexp">/etc/nginx</span> --sbin-path=<span class="regexp">/usr/sbin</span><span class="regexp">/nginx --conf-path=/etc</span><span class="regexp">/nginx/nginx</span>.conf --error-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/error</span>.log --http-log-path=<span class="regexp">/var/log</span><span class="regexp">/nginx/access</span>.log --pid-path=<span class="regexp">/var/run</span><span class="regexp">/nginx.pid --lock-path=/var</span><span class="regexp">/run/nginx</span>.lock --http-client-body-temp-path=<span class="regexp">/var/cache</span><span class="regexp">/nginx/client</span>_temp --http-proxy-temp-path=<span class="regexp">/var/cache</span><span class="regexp">/nginx/proxy</span>_temp --http-fastcgi-temp-path=<span class="regexp">/var/cache</span><span class="regexp">/nginx/fastcgi</span>_temp --http-uwsgi-temp-path=<span class="regexp">/var/cache</span><span class="regexp">/nginx/uwsgi</span>_temp --http-scgi-temp-path=<span class="regexp">/var/cache</span><span class="regexp">/nginx/scgi</span>_temp --user=nginx --group=nginx --<span class="keyword">with</span>-openssl=../libressl-<span class="number">2.2</span>.<span class="number">2</span> --<span class="keyword">with</span>-http_v2_module --<span class="keyword">with</span>-http_ssl_module --<span class="keyword">with</span>-http_realip_module --<span class="keyword">with</span>-http_addition_module --<span class="keyword">with</span>-http_sub_module --<span class="keyword">with</span>-http_dav_module --<span class="keyword">with</span>-http_flv_module --<span class="keyword">with</span>-http_mp4_module --<span class="keyword">with</span>-http_gunzip_module --<span class="keyword">with</span>-http_gzip_static_module --<span class="keyword">with</span>-http_random_index_module --<span class="keyword">with</span>-http_secure_link_module --<span class="keyword">with</span>-http_stub_status_module --<span class="keyword">with</span>-http_auth_request_module --<span class="keyword">with</span>-mail --<span class="keyword">with</span>-mail_ssl_module --<span class="keyword">with</span>-file-aio --<span class="keyword">with</span>-ipv6 --<span class="keyword">with</span>-http_spdy_module --<span class="keyword">with</span>-cc-opt=<span class="string">'-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'</span></span><br></pre></td></tr></table></figure>
<p>记下这里的configure arguments，后面编译的时候要用的。</p>
<ol start="2">
<li>安装PCRE，Nginx的rewrite模块依赖PCRE</li>
</ol>
  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /ppxu</span></span><br><span class="line"><span class="preprocessor"># yum -y install make zlib zlib-devel gcc-c++ libtool</span></span><br><span class="line"><span class="preprocessor"># wget http://nchc.dl.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz</span></span><br><span class="line"><span class="preprocessor"># tar zxvf pcre-8.37.tar.gz</span></span><br><span class="line"><span class="preprocessor"># cd pcre-8.37/</span></span><br><span class="line"><span class="preprocessor"># ./configure</span></span><br><span class="line"><span class="preprocessor"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>下载OpenSSL，可以从<a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a>或者<a href="http://www.libressl.org/" target="_blank" rel="external">LibreSSL</a>下载</li>
</ol>
  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /ppxu</span></span><br><span class="line"><span class="preprocessor"># wget http:<span class="comment">//ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.1.tar.gz</span></span></span><br><span class="line"><span class="preprocessor"># tar zxvf libressl-<span class="number">2.3</span><span class="number">.1</span>.tar.gz</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>下载，配置并编译Nginx</li>
</ol>
  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">cd</span> <span class="comment">/ppxu</span></span><br><span class="line"><span class="comment">#</span> <span class="comment">wget</span> <span class="comment">http://nginx</span><span class="string">.</span><span class="comment">org/download/nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span></span><br><span class="line"><span class="comment">#</span> <span class="comment">tar</span> <span class="comment">zxvf</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span></span><br><span class="line"><span class="comment">#</span> <span class="comment">cd</span> <span class="comment">nginx</span><span class="literal">-</span><span class="comment">1</span><span class="string">.</span><span class="comment">9</span><span class="string">.</span><span class="comment">9/</span></span><br><span class="line"><span class="comment">#</span> <span class="string">.</span><span class="comment">/configure</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix=/etc/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">sbin</span><span class="literal">-</span><span class="comment">path=/usr/sbin/nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">conf</span><span class="literal">-</span><span class="comment">path=/etc/nginx/nginx</span><span class="string">.</span><span class="comment">conf</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">error</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">path=/var/log/nginx/error</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">log</span><span class="literal">-</span><span class="comment">path=/var/log/nginx/access</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">pid</span><span class="literal">-</span><span class="comment">path=/var/run/nginx</span><span class="string">.</span><span class="comment">pid</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">lock</span><span class="literal">-</span><span class="comment">path=/var/run/nginx</span><span class="string">.</span><span class="comment">lock</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">client</span><span class="literal">-</span><span class="comment">body</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/client_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">proxy</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/proxy_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">fastcgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/fastcgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">uwsgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/uwsgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">http</span><span class="literal">-</span><span class="comment">scgi</span><span class="literal">-</span><span class="comment">temp</span><span class="literal">-</span><span class="comment">path=/var/cache/nginx/scgi_temp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user=nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">group=nginx</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">openssl=</span><span class="string">.</span><span class="string">.</span><span class="comment">/libressl</span><span class="literal">-</span><span class="comment">2</span><span class="string">.</span><span class="comment">3</span><span class="string">.</span><span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_v2_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_realip_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_addition_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_sub_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_dav_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_flv_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_mp4_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gunzip_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_gzip_static_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_random_index_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_secure_link_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_stub_status_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">http_auth_request_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mail</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">mail_ssl_module</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">file</span><span class="literal">-</span><span class="comment">aio</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">ipv6</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">with</span><span class="literal">-</span><span class="comment">cc</span><span class="literal">-</span><span class="comment">opt='</span><span class="literal">-</span><span class="comment">O2</span> <span class="literal">-</span><span class="comment">g</span> <span class="literal">-</span><span class="comment">pipe</span> <span class="literal">-</span><span class="comment">Wp</span><span class="string">,</span><span class="literal">-</span><span class="comment">D_FORTIFY_SOURCE=2</span> <span class="literal">-</span><span class="comment">fexceptions</span> <span class="literal">-</span><span class="comment">fstack</span><span class="literal">-</span><span class="comment">protector</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">param=ssp</span><span class="literal">-</span><span class="comment">buffer</span><span class="literal">-</span><span class="comment">size=4</span> <span class="literal">-</span><span class="comment">m64</span> <span class="literal">-</span><span class="comment">mtune=generic'</span></span><br><span class="line"><span class="comment">#</span> <span class="comment">make</span></span><br></pre></td></tr></table></figure>
<p>其中的<code>--with-http_v2_module</code>就是开启HTTP/2的设置。</p>
<ol start="5">
<li>替换Nginx</li>
</ol>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># which nginx    <span class="comment">//查找nginx路径</span></span><br><span class="line"># mv <span class="regexp">/usr/</span>sbin<span class="regexp">/nginx /u</span>sr<span class="regexp">/sbin/</span>nginx.old    <span class="comment">//备份旧版nginx</span></span><br><span class="line"># cp objs<span class="regexp">/nginx /u</span>sr<span class="regexp">/sbin/</span>    <span class="comment">//将编译好的新版nginx复制过去</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>确认更新生效</li>
</ol>
  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/sbin/nginx -t</span></span><br><span class="line">nginx: <span class="keyword">the</span> configuration <span class="type">file</span> /etc/nginx/nginx.conf syntax <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration <span class="type">file</span> /etc/nginx/nginx.conf test <span class="keyword">is</span> successful</span><br><span class="line"><span class="comment"># /usr/sbin/nginx -v</span></span><br><span class="line">nginx <span class="property">version</span>: nginx/<span class="number">1.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>更新Nginx配置文件</li>
</ol>
  <figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    listen       443 ssl http2<span class="comment">;</span></span><br><span class="line">    server_name  ppxu.me *.ppxu.me<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>重启Nginx即可</li>
</ol>
<p>访问网站，在响应头里可以看到<code>server:nginx/1.9.9</code>，同时，在<a href="chrome://net-internals/#http2" target="_blank" rel="external">chrome://net-internals/#http2</a>上面可以看到网站已经支持了HTTP/2</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/http2.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/http2.png"></p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="http://www.linuxde.net/2011/08/554.html" target="_blank" rel="external">http://www.linuxde.net/2011/08/554.html</a></li>
<li><a href="http://www.linuxidc.com/Linux/2014-02/96137.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-02/96137.htm</a></li>
<li><a href="http://www.poluoluo.com/server/201403/265778.html" target="_blank" rel="external">http://www.poluoluo.com/server/201403/265778.html</a></li>
<li><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="external">https://imququ.com/post/http2-resource.html</a></li>
<li><a href="https://imququ.com/post/nginx-http2-patch.html" target="_blank" rel="external">https://imququ.com/post/nginx-http2-patch.html</a></li>
<li><a href="http://www.tuicool.com/articles/3eeIVfi" target="_blank" rel="external">http://www.tuicool.com/articles/3eeIVfi</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>话说SPDY已经被HTTP/2上位了，网站继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，下面是操作过程</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="http2" scheme="https://ppxu.me/tags/http2/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nginx配置SPDY]]></title>
    <link href="https://ppxu.me/2015/12/22/config-spdy-in-nginx/"/>
    <id>https://ppxu.me/2015/12/22/config-spdy-in-nginx/</id>
    <published>2015-12-22T09:32:20.000Z</published>
    <updated>2015-12-23T13:46:25.000Z</updated>
    <content type="html"><![CDATA[<p>本来准备给服务器搞个HTTP/2上去，发现Nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的Nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级Nginx和HTTP/2。</p>
<a id="more"></a>
<p>首先查看一下本地的Nginx是不是已经包含了SPDY</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># nginx -V |grep spdy</span></span><br></pre></td></tr></table></figure>
<p>如果看到有<code>–-with-http_spdy_module</code>，就说明已经支持了SPDY，如果没有的话需要重新下载和编译Nginx，在编译的时候加上<code>--with-http_spdy_module</code>选项。</p>
<p>然后修改Nginx的配置文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    listen       <span class="number">443</span> ssl spdy;</span><br><span class="line">    server_name  ppxu.me *.ppxu.me;</span><br><span class="line"></span><br><span class="line">    add_header   Alternate-Protocol  <span class="number">443</span>:npn-spdy/<span class="number">3.1</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>重启Nginx，SPDY就启动成功了。</p>
<p>访问网站，然后在chrome中打开<code>chrome://net-internals/#http2</code>，就可以看到站点已经支持了SPDY3.1</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png"></p>
<p>还可以在这个<a href="https://spdycheck.org/" target="_blank" rel="external">网站</a>检查SPDY启动情况。</p>
<p>不过SPDY协议已经废弃了，还是赶紧搞上HTTP/2才是正事。</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li>
<p><a href="http://nginx.org/" target="_blank" rel="external">http://nginx.org/</a></p>
</li>
<li>
<p><a href="http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/" target="_blank" rel="external">http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/</a></p>
</li>
<li>
<p><a href="http://www.linuxidc.com/Linux/2015-09/123251.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-09/123251.htm</a></p>
</li>
<li>
<p><a href="http://www.linuxidc.com/Linux/2015-02/112979.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-02/112979.htm</a></p>
</li>
<li>
<p><a href="http://www.jb51.net/article/59017.htm" target="_blank" rel="external">http://www.jb51.net/article/59017.htm</a></p>
</li>
<li>
<p><a href="http://www.tuicool.com/articles/2mi63q" target="_blank" rel="external">http://www.tuicool.com/articles/2mi63q</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本来准备给服务器搞个HTTP/2上去，发现Nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的Nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级Nginx和HTTP/2。</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="spdy" scheme="https://ppxu.me/tags/spdy/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Github的Webhooks实现Hexo的自动部署]]></title>
    <link href="https://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/"/>
    <id>https://ppxu.me/2015/12/21/auto-deploy-hexo-with-github-webhooks/</id>
    <published>2015-12-21T09:29:24.000Z</published>
    <updated>2015-12-23T13:41:53.000Z</updated>
    <content type="html"><![CDATA[<p>博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。</p>
<a id="more"></a>
<p>整个过程有两个环节：</p>
<h3 id="本地代码自动部署到github"><a class="header-anchor" href="#本地代码自动部署到github">¶</a>本地代码自动部署到Github</h3>
<p>Hexo本身就有deploy功能，只要在<code>_config.yml</code>里面做一下<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">配置</a>，就可以部署到Github、Heroku等平台上，如果博客是托管在Github Pages上的话使用这种方式可以很方便的实现自动部署，不过通过这种方式发送到Github上的只有<code>public</code>目录，我这里希望托管整个应用的代码，就不能使用这种方式了，反正只要可以push就行了，我们搬出shell大法好。</p>
<p>创建文件<code>deploy.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo start \033[0m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] hexo generate...  \033[0m"</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git commit...  \033[0m"</span></span><br><span class="line">d=`date +%x-%T`</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"auto deploy at "</span><span class="variable">$&#123;d&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] git push...  \033[0m"</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO DEPLOY] deploy hexo finish \033[0m"</span></span><br></pre></td></tr></table></figure>
<p>然后增加权限</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># chmod +x ./deploy.sh</span></span><br></pre></td></tr></table></figure>
<p>这样完成本地开发后，只要执行命令</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># ./deploy.sh</span></span><br></pre></td></tr></table></figure>
<p>就可以让Hexo生成静态文件并push到Github上。</p>
<h3 id="github自动同步到服务器"><a class="header-anchor" href="#github自动同步到服务器">¶</a>Github自动同步到服务器</h3>
<p>为了让服务器可以自动同步Github上面的更新，我们需要用到Github的Webhooks。</p>
<p>首先创建文件<code>sync.sh</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo start \033[0m"</span></span><br><span class="line"><span class="built_in">cd</span> /ppxu/blog</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] git pull...  \033[0m"</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[32m [AUTO SYNC] sync hexo finish \033[0m"</span></span><br></pre></td></tr></table></figure>
<p>目标是每当Github有push的时候就自动调用这个脚本。</p>
<p>然后找到Github仓库的Settings页</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/hook.png"></p>
<p>添加一条Webhook，填写请求地址<code>http://xx.xx.xx.xx:7777/webhook</code>，这样每当Github收到push或者其他事件时就会自动向这个地址发送一条POST请求。</p>
<p>下面在服务器上补充这个请求地址，我们用Node搭一个简单的http服务，这里用到了<a href="https://github.com/rvagg/github-webhook-handler" target="_blank" rel="external">github-webhook-handler</a>处理hook消息，创建文件<code>server.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; path: <span class="string">'/webhook'</span>, secret: <span class="string">'********'</span> &#125;);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span>;</span><br><span class="line">    res.end(<span class="string">'no such location'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">  exec(<span class="string">'/ppxu/blog/sync.sh'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'sync server err: '</span> + stderr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里的<code>secret</code>要和在Github上新建hook时设置的一样，请求时校验用的。</p>
<p>然后启动服务</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># node server.js &amp;</span></span><br></pre></td></tr></table></figure>
<p>这里也可以用forever之类的工具防止进程挂掉。</p>
<p>这样一套自动部署系统就建立好了，在本机和服务器的实际效果如下：</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png"></p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/sync.png"></p>
<p>感觉生活一下子美好起来了呢：）</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li>
<p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/deployment.html</a></p>
</li>
<li>
<p><a href="https://developer.github.com/webhooks/" target="_blank" rel="external">https://developer.github.com/webhooks/</a></p>
</li>
<li>
<p><a href="http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html" target="_blank" rel="external">http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。</p>]]>
    
    </summary>
    
      <category term="deploy" scheme="https://ppxu.me/tags/deploy/"/>
    
      <category term="github" scheme="https://ppxu.me/tags/github/"/>
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="shell" scheme="https://ppxu.me/tags/shell/"/>
    
      <category term="webhooks" scheme="https://ppxu.me/tags/webhooks/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里云ECS配置Nginx和SSL]]></title>
    <link href="https://ppxu.me/2015/12/20/config-ssl-in-nginx/"/>
    <id>https://ppxu.me/2015/12/20/config-ssl-in-nginx/</id>
    <published>2015-12-20T14:01:05.000Z</published>
    <updated>2015-12-23T13:46:43.000Z</updated>
    <content type="html"><![CDATA[<p>今天给服务器安装了Nginx，并配置了SSL，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。</p>
<a id="more"></a>
<p>先是安装Nginx</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># wget http:<span class="comment">//nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span></span><br><span class="line"><span class="preprocessor"># rpm -ivh nginx-release-centos-<span class="number">7</span>-<span class="number">0.</span>el7.ngx.noarch.rpm</span></span><br><span class="line"><span class="preprocessor"># yum install nginx</span></span><br></pre></td></tr></table></figure>
<p>启动Nginx</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># systemctl start nginx</span></span><br></pre></td></tr></table></figure>
<p>这样Nginx服务就已经可以访问了，输入服务器ip地址就可以看到Nginx主页，然后我们需要把Hexo服务的4000端口转发到Nginx的80端口，查看Nginx配置文件<code>/etc/nginx/nginx.conf</code>，看到需要修改<code>conf.d</code>目录下的<code>/etc/nginx/conf.d/default.conf</code>文件</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  ppxu.me *.ppxu.me;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass          http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">4000</span>/;</span><br><span class="line">        proxy_redirect      off;</span><br><span class="line">        proxy_set_header    X-Real-IP       <span class="variable">$remote</span>_addr;</span><br><span class="line">        proxy_set_header    X-Forwarded-For <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>重启Nginx</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># systemctl restart nginx</span></span><br></pre></td></tr></table></figure>
<p>现在访问网站，在响应头里就可以看到<code>Server:nginx/1.8.0</code>，说明Nginx环境已经正常了，下面准备搞上HTTPS。</p>
<p>这里就不详述HTTPS的原理了，对我们这个小博客而言，搞个免费的SSL证书就可以了，这里推荐<a href="https://startssl.com/" target="_blank" rel="external">https://startssl.com/</a>或者<a href="https://www.wosign.com/" target="_blank" rel="external">https://www.wosign.com/</a>，申请成功后把下载下来的对应版本的证书文件上传到服务器上，包含公钥<code>.crt</code>和私钥<code>.key</code>。</p>
<p>然后编辑<code>/etc/nginx/conf.d/default.conf</code></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80<span class="comment">;</span></span><br><span class="line">    listen       443 ssl<span class="comment">;</span></span><br><span class="line">    server_name  ppxu.me *.ppxu.me<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    ssl on<span class="comment">;</span></span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/ppxu.crt<span class="comment">;</span></span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/ppxu.key<span class="comment">;</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class="comment">;</span></span><br><span class="line">    ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL'<span class="comment">;</span></span><br><span class="line">    ssl_prefer_server_ciphers on<span class="comment">;</span></span><br><span class="line">    ssl_session_cache shared:SSL:10m<span class="comment">;</span></span><br><span class="line">    ssl_session_timeout 10m<span class="comment">;</span></span><br><span class="line">    ssl_stapling on<span class="comment">;</span></span><br><span class="line">    ssl_stapling_verify on<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass          http://<span class="number">127.0.0.1</span>:4000/<span class="comment">;</span></span><br><span class="line">        proxy_redirect      off<span class="comment">;</span></span><br><span class="line">        proxy_set_header    X-Real-IP       $remote_addr<span class="comment">;</span></span><br><span class="line">        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>重启Nginx，如果一切顺利，现在就可以通过<code>https://ppxu.me</code>访问到本网站了，但是直接如果直接输入<code>ppxu.me</code>的话会报400错误，显示</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">The</span> plain <span class="type">HTTP</span> request was sent to <span class="type">HTTPS</span> <span class="foreign"><span class="keyword">port</span></span></span><br></pre></td></tr></table></figure>
<p>所以我们需要将http的请求强制使用https访问，最方便的办法是启用HSTS，在nginx的配置中添加</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_header </span><span class="keyword">Strict-Transport-Security </span><span class="string">"max-age=31536000; includeSubdomains"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这样只要是支持HSTS的浏览器，就可以自动完成http到https的替换，而且是直接在浏览器本地完成的，对于不支持的浏览器，只能在服务器做重定向了，继续在Nginx配置中添加一条规则</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page <span class="number">497</span>  https://<span class="variable">$host</span><span class="variable">$uri</span>;</span><br></pre></td></tr></table></figure>
<p>这样我们的网站就已经完全支持了HTTPS访问，可以在这个网站<a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="external">https://www.ssllabs.com/ssltest/analyze.html</a>对网页进行安全评测，如果评分不够高的话可以再看看如何<a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">加强nginx的SSL安全</a>。</p>
<p><img src="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png" alt="http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png"></p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="http://codybonney.com/installing-nginx-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-nginx-on-centos-6-4/</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/" target="_blank" rel="external">http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/</a></li>
<li><a href="https://imququ.com/post/switch-to-https.html" target="_blank" rel="external">https://imququ.com/post/switch-to-https.html</a></li>
<li><a href="https://imququ.com/post/sth-about-switch-to-https.html" target="_blank" rel="external">https://imququ.com/post/sth-about-switch-to-https.html</a></li>
<li><a href="http://www.ha97.com/5194.html" target="_blank" rel="external">http://www.ha97.com/5194.html</a></li>
<li><a href="http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html" target="_blank" rel="external">http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html</a></li>
<li><a href="http://www.codeceo.com/article/nginx-ssl-nodejs.html" target="_blank" rel="external">http://www.codeceo.com/article/nginx-ssl-nodejs.html</a></li>
<li><a href="http://www.ttlsa.com/nginx/nginx-node-js/" target="_blank" rel="external">http://www.ttlsa.com/nginx/nginx-node-js/</a></li>
<li><a href="http://blog.csdn.net/wzy_1988/article/details/8549290" target="_blank" rel="external">http://blog.csdn.net/wzy_1988/article/details/8549290</a></li>
<li><a href="http://www.tutugreen.com/wordpress/upgrade-ssl/" target="_blank" rel="external">http://www.tutugreen.com/wordpress/upgrade-ssl/</a></li>
<li><a href="http://www.oschina.net/translate/strong_ssl_security_on_nginx" target="_blank" rel="external">http://www.oschina.net/translate/strong_ssl_security_on_nginx</a></li>
<li><a href="http://blog.jobbole.com/44844/" target="_blank" rel="external">http://blog.jobbole.com/44844/</a></li>
<li><a href="http://blog.jobbole.com/80591/" target="_blank" rel="external">http://blog.jobbole.com/80591/</a></li>
<li><a href="https://imququ.com/post/my-nginx-conf-for-wpo.html" target="_blank" rel="external">https://imququ.com/post/my-nginx-conf-for-wpo.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天给服务器安装了Nginx，并配置了SSL，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="https" scheme="https://ppxu.me/tags/https/"/>
    
      <category term="nginx" scheme="https://ppxu.me/tags/nginx/"/>
    
      <category term="ssl" scheme="https://ppxu.me/tags/ssl/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里云ECS搭建Hexo]]></title>
    <link href="https://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/"/>
    <id>https://ppxu.me/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/</id>
    <published>2015-12-19T02:31:27.000Z</published>
    <updated>2015-12-23T13:47:51.000Z</updated>
    <content type="html"><![CDATA[<p>最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。</p>
<a id="more"></a>
<p>撸主选的是最便宜的阿里云ECS，应付日常小撸应该足够了，具体配置如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU：<span class="number">1</span>核</span><br><span class="line">内存：<span class="number">1024</span>MB</span><br><span class="line">操作系统：CentOS <span class="number">7.0</span> <span class="number">64</span>位</span><br><span class="line">带宽：<span class="number">1</span>Mbps</span><br></pre></td></tr></table></figure>
<p>下面是具体的手法：</p>
<ul>
<li>连接服务器</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh root<span class="doctag">@xx</span>.xx.xx.xx</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>安装Nodejs环境</p>
<ul>
<li>更新软件源</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># yum -y update</span></span><br></pre></td></tr></table></figure>
<ul>
<li>下载Node.js</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># cd /usr/local/src</span></span><br><span class="line"><span class="preprocessor"># wget http://nodejs.org/dist/node-latest.tar.gz</span></span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># tar zxf node-latest.tar.gz</span></span><br><span class="line"><span class="preprocessor"># cd node-v*.*.*</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编译安装</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># ./configure</span></span><br><span class="line"><span class="preprocessor"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>
<ul>
<li>确认安装成功</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># node -v</span></span><br><span class="line"><span class="preprocessor"># npm -v</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装Hexo</p>
</li>
</ul>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># npm install -g hexo-cli</span></span><br><span class="line"><span class="preprocessor"># hexo init blog</span></span><br><span class="line"><span class="preprocessor"># cd blog</span></span><br><span class="line"><span class="preprocessor"># npm install</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动Hexo</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># hexo server    <span class="comment">//普通启动</span></span></span><br><span class="line"><span class="preprocessor"># hexo server &amp;  <span class="comment">//静默启动</span></span></span><br></pre></td></tr></table></figure>
<p>启动成功后就可以通过服务器的ip地址<code>xx.xx.xx.xx:4000</code>访问到页面了，然后需要把4000转到80上，通常做法是用Nginx做反向代理，这里先用iptables防火墙简单做一下转发处理。</p>
<ul>
<li>转到80端口</li>
</ul>
<p>编辑iptables文件</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># vi /etc/sysconfig/iptables</span></span><br></pre></td></tr></table></figure>
<p>加上下面这段</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">80</span> -j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">4000</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">*nat</span><br><span class="line">-A PREROUTING -p tcp --dport <span class="number">80</span> -j REDIRECT --to-ports <span class="number">4000</span></span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>
<p>重启iptables服务</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># service iptables restart</span></span><br></pre></td></tr></table></figure>
<p>这时发现报错了</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed <span class="built_in">to</span> restart iptables.service: Unit iptables.service failed <span class="built_in">to</span> <span class="built_in">load</span>: No such <span class="built_in">file</span> <span class="operator">or</span> <span class="built_in">directory</span>.</span><br></pre></td></tr></table></figure>
<p>查了一下原来是CentOS 7中的防火墙改成了firewalld，所以要换回iptables。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># systemctl stop firewalld</span></span><br><span class="line"><span class="preprocessor"># systemctl mask firewalld</span></span><br><span class="line"><span class="preprocessor"># yum install iptables-services</span></span><br><span class="line"><span class="preprocessor"># systemctl enable iptables</span></span><br><span class="line"><span class="preprocessor"># service start iptables</span></span><br></pre></td></tr></table></figure>
<p>这样就可以通过ip地址<code>xx.xx.xx.xx</code>直接访问网站了。</p>
<ul>
<li>域名解析</li>
</ul>
<p>再撸个域名<code>ppxu.me</code>，把<code>@</code>和<code>www</code>都解析到服务器ip地址就可以了。</p>
<ul>
<li>git管理</li>
</ul>
<p>再配置一下git环境，以后就可以通过git来管理内容了。</p>
<h4 id="参考资料"><a class="header-anchor" href="#参考资料">¶</a>参考资料</h4>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/index.html</a></li>
<li><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">http://wsgzao.github.io/post/hexo-guide/</a></li>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank" rel="external">http://zipperary.com/categories/hexo/</a></li>
<li><a href="http://www.jianshu.com/p/73779eacb494" target="_blank" rel="external">http://www.jianshu.com/p/73779eacb494</a></li>
<li><a href="http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/" target="_blank" rel="external">http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/</a></li>
<li><a href="http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/" target="_blank" rel="external">http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/</a></li>
<li><a href="http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/" target="_blank" rel="external">http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/</a></li>
<li><a href="http://www.vkilo.com/rhel-7-iptables-service.html" target="_blank" rel="external">http://www.vkilo.com/rhel-7-iptables-service.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。</p>]]>
    
    </summary>
    
      <category term="aliyun" scheme="https://ppxu.me/tags/aliyun/"/>
    
      <category term="centos" scheme="https://ppxu.me/tags/centos/"/>
    
      <category term="ecs" scheme="https://ppxu.me/tags/ecs/"/>
    
      <category term="hexo" scheme="https://ppxu.me/tags/hexo/"/>
    
      <category term="nodejs" scheme="https://ppxu.me/tags/nodejs/"/>
    
      <category term="blog" scheme="https://ppxu.me/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://ppxu.me/2015/12/18/hello-world/"/>
    <id>https://ppxu.me/2015/12/18/hello-world/</id>
    <published>2015-12-18T14:31:17.000Z</published>
    <updated>2015-12-18T14:31:17.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a class="header-anchor" href="#quick-start">¶</a>Quick Start</h2>
<h3 id="create-a-new-post"><a class="header-anchor" href="#create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a class="header-anchor" href="#run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a class="header-anchor" href="#generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="header-anchor" href="#deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
