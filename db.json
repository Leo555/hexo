{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0}],"Cache":[{"_id":"source/_posts/auto-deploy-hexo-with-github-webhooks.md","shasum":"3d46f7c4e4cdf294bf4bd4e318db1df77ef9314c","modified":1450878113000},{"_id":"source/_posts/config-ssl-in-nginx.md","shasum":"664ce985c8d1aeaf2c0058f9e10ea6ced673696a","modified":1450878231000},{"_id":"source/_posts/install-nodejs-and-hexo-in-aliyun-centos.md","shasum":"00865b535bfbd32a518a67ffce7cfeef8716bba0","modified":1450878262000},{"_id":"source/_posts/config-spdy-in-nginx.md","shasum":"6fd9946e783a85aea259ee5372e62992148fcba3","modified":1450878157000},{"_id":"source/_posts/nginx-smooth-upgrade-and-config-http2.md","shasum":"e6c5c3e9e33c445800333b6d16a816f90c5e1629","modified":1450878311000},{"_id":"source/_posts/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1450449077000},{"_id":"themes/apollo/README.md","shasum":"fdaa691c63bba80c75b17e9426c06f148dfb9dc4","modified":1450495410000},{"_id":"themes/apollo/LICENSE","shasum":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1450495410000},{"_id":"themes/apollo/_config.yml","shasum":"d740b11c3133ce65f1f7f186422f3a11de63e7c4","modified":1450497974000},{"_id":"themes/apollo/doc/custom-blocks.md","shasum":"78e9400714d0ff7c9b272d3ccc80fb18c3bf208f","modified":1450495410000},{"_id":"themes/apollo/gulpfile.babel.js","shasum":"ae6ba496e2672ed07050295954ca3da8b0ef423c","modified":1450495410000},{"_id":"themes/apollo/layout/index.jade","shasum":"58c451042cad5beeb5a76852bba609c651ff3428","modified":1450495410000},{"_id":"themes/apollo/layout/mixins/paginator.jade","shasum":"510ee0ba37b4522cca6c6204d641809454ba3ac6","modified":1450495410000},{"_id":"themes/apollo/layout/mixins/post.jade","shasum":"db05e11065f6f37324218accadd4c7630c80c663","modified":1450772110000},{"_id":"themes/apollo/layout/partial/comment.jade","shasum":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1450495410000},{"_id":"themes/apollo/layout/partial/foot.jade","shasum":"75cdc0710d841d5d94979cc9f9573d307647621c","modified":1450772166000},{"_id":"themes/apollo/layout/partial/head.jade","shasum":"2e490108c1f000b39606cf610fcf77c30b19d590","modified":1450772460000},{"_id":"themes/apollo/layout/partial/layout.jade","shasum":"7aae8a09d88ce269f1cfb3394d3afcf4b1962b51","modified":1450717689000},{"_id":"themes/apollo/layout/partial/nav.jade","shasum":"c35d3061da4b053b73150d9741c542d660798270","modified":1450495410000},{"_id":"themes/apollo/layout/partial/scripts.jade","shasum":"ed937de186642bb8d11defc2b1c5cbf3388aa59e","modified":1450497749000},{"_id":"themes/apollo/layout/post.jade","shasum":"6de2c8cb24d70035008155ff5ba37d6bdeb94e8d","modified":1450772053000},{"_id":"themes/apollo/package.json","shasum":"a872d0158d522612ccc0b300bdf27d0228de8428","modified":1450495410000},{"_id":"themes/apollo/source/css/apollo.css","shasum":"bbc1e30694afdf3f3e671cc19705a5b0a781bbe7","modified":1450772847000},{"_id":"themes/apollo/source/scss/_partial/base.scss","shasum":"88b361e68475caddbab763feed5e1db788ac2cd7","modified":1450495410000},{"_id":"themes/apollo/source/favicon.png","shasum":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1450495410000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","shasum":"cf0ad16d999537cefe8441893b4edcb54eafe37c","modified":1450772597000},{"_id":"themes/apollo/source/scss/_partial/header.scss","shasum":"d24cc6520f3faa7bb80610b858a92639eadcc289","modified":1450495410000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","shasum":"0b9c7097136ac8e4a07d9702fc4dbe0345ac7596","modified":1450495410000},{"_id":"themes/apollo/source/scss/_partial/post.scss","shasum":"8ca0ffea647c28ed0b158635a142e43ae052b2f2","modified":1450495410000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","shasum":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1450495410000},{"_id":"themes/apollo/source/scss/_partial/posts.scss","shasum":"92858015b8f3dcb4eb91b6dc41563b7aaa91b376","modified":1450495410000},{"_id":"themes/apollo/source/scss/apollo.scss","shasum":"f8b40223ea647b7c5627c344ead5c1a493bdd576","modified":1450495410000},{"_id":"public/2015/12/23/nginx-smooth-upgrade-and-config-http2/index.html","modified":1450878319163,"shasum":"ec89a950ae1c7e950c0311ba12f80bb8c8ab16c2"},{"_id":"public/2015/12/22/config-spdy-in-nginx/index.html","modified":1450878319299,"shasum":"9a3a85ce62eda03683218068a74ad73aeb84c86c"},{"_id":"public/2015/12/21/auto-deploy-hexo-with-github-webhooks/index.html","modified":1450878319423,"shasum":"4bf23b486e2edbd897d69fb84c6edbb31591fe0a"},{"_id":"public/2015/12/20/config-ssl-in-nginx/index.html","modified":1450878319514,"shasum":"c8726b00c2e202ca5c38d966263104025c29760e"},{"_id":"public/2015/12/19/install-nodejs-and-hexo-in-aliyun-centos/index.html","modified":1450878319611,"shasum":"dd10e7ed8a06650b4e2f5315f4e1a90111907108"},{"_id":"public/2015/12/18/hello-world/index.html","modified":1450877440625,"shasum":"1813a4b60042aa4cc9ac52fdf72fb67bb447846a"},{"_id":"public/archives/index.html","modified":1450878319788,"shasum":"c9f510d4dd46a3be887b4798b7342bf9b7d56d47"},{"_id":"public/archives/2015/index.html","modified":1450878319848,"shasum":"c9f510d4dd46a3be887b4798b7342bf9b7d56d47"},{"_id":"public/archives/2015/12/index.html","modified":1450878319911,"shasum":"c9f510d4dd46a3be887b4798b7342bf9b7d56d47"},{"_id":"public/categories/blog/index.html","modified":1450878319738,"shasum":"e5d375ba3053ceb25734659d028005875b320ce0"},{"_id":"public/atom.xml","modified":1450878319969,"shasum":"b70337ce233676854ed7584b583ec34b127151f1"},{"_id":"public/index.html","modified":1450878319965,"shasum":"3b666074b48440491114961285fe51ed30c987a6"},{"_id":"public/sitemap.xml","modified":1450878319975,"shasum":"236270605c9d73a8377f7268d5184fdd026061b7"},{"_id":"public/tags/github/index.html","modified":1450878320024,"shasum":"a9423d27bcb3b662c86e68932864eebea06224d2"},{"_id":"public/tags/webhooks/index.html","modified":1450878320078,"shasum":"a9423d27bcb3b662c86e68932864eebea06224d2"},{"_id":"public/tags/hexo/index.html","modified":1450878320135,"shasum":"b3283bf73f709db1d3e85afa5502ee04fe3f95da"},{"_id":"public/tags/deploy/index.html","modified":1450878320189,"shasum":"a9423d27bcb3b662c86e68932864eebea06224d2"},{"_id":"public/tags/shell/index.html","modified":1450878320238,"shasum":"a9423d27bcb3b662c86e68932864eebea06224d2"},{"_id":"public/tags/aliyun/index.html","modified":1450878320296,"shasum":"c4e4e06760d553055f5843ada465f4e520d4e488"},{"_id":"public/tags/ecs/index.html","modified":1450878320350,"shasum":"c4e4e06760d553055f5843ada465f4e520d4e488"},{"_id":"public/tags/centos/index.html","modified":1450878320407,"shasum":"c4e4e06760d553055f5843ada465f4e520d4e488"},{"_id":"public/tags/nginx/index.html","modified":1450878320467,"shasum":"6a739766291d6eff882c01e2fd1d679f7b200120"},{"_id":"public/tags/http2/index.html","modified":1450878320519,"shasum":"b0d8932954036483af992f6073a24c3c5b6e79df"},{"_id":"public/tags/nodejs/index.html","modified":1450878320576,"shasum":"713cb6f0c73b970512517ecafbef0c8c17e4f4fe"},{"_id":"public/tags/ssl/index.html","modified":1450878320627,"shasum":"6da11cc0f0156e56524447fe6776cfd959b80d22"},{"_id":"public/tags/https/index.html","modified":1450878320685,"shasum":"6da11cc0f0156e56524447fe6776cfd959b80d22"},{"_id":"public/tags/spdy/index.html","modified":1450877441391,"shasum":"c052489a1fa39f1d4b7315770aa8816bc38bb3a7"}],"Category":[{"name":"blog","_id":"ciiiuswnp0001dgxxkxt64fl6"}],"Data":[],"Page":[],"Post":[{"title":"使用Github的Webhooks实现Hexo的自动部署","date":"2015-12-21T09:29:24.000Z","_content":"博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。\n\n<!--more-->\n\n整个过程有两个环节：\n\n### 本地代码自动部署到Github\n\nHexo本身就有deploy功能，只要在`_config.yml`里面做一下[配置](https://hexo.io/zh-cn/docs/deployment.html)，就可以部署到Github、Heroku等平台上，如果博客是托管在Github Pages上的话使用这种方式可以很方便的实现自动部署，不过通过这种方式发送到Github上的只有`public`目录，我这里希望托管整个应用的代码，就不能使用这种方式了，反正只要可以push就行了，我们搬出shell大法好。\n\n创建文件`deploy.sh`\n\n{% codeblock %}\n#!/bin/bash\n\necho -e \"\\033[32m [AUTO DEPLOY] deploy hexo start \\033[0m\"\necho -e \"\\033[32m [AUTO DEPLOY] hexo generate...  \\033[0m\"\nhexo g\necho -e \"\\033[32m [AUTO DEPLOY] git commit...  \\033[0m\"\nd=`date +%x-%T`\ngit add .\ngit commit -m \"auto deploy at \"${d}\necho -e \"\\033[32m [AUTO DEPLOY] git push...  \\033[0m\"\ngit push origin master\necho -e \"\\033[32m [AUTO DEPLOY] deploy hexo finish \\033[0m\"\n{% endcodeblock %}\n\n然后增加权限\n\n{% codeblock %}\n# chmod +x ./deploy.sh\n{% endcodeblock %}\n\n这样完成本地开发后，只要执行命令\n\n{% codeblock %}\n# ./deploy.sh\n{% endcodeblock %}\n\n就可以让Hexo生成静态文件并push到Github上。\n\n### Github自动同步到服务器\n\n为了让服务器可以自动同步Github上面的更新，我们需要用到Github的Webhooks。\n\n首先创建文件`sync.sh`\n\n{% codeblock %}\n#!/bin/bash\n\necho -e \"\\033[32m [AUTO SYNC] sync hexo start \\033[0m\"\ncd /ppxu/blog\necho -e \"\\033[32m [AUTO SYNC] git pull...  \\033[0m\"\ngit pull origin master\necho -e \"\\033[32m [AUTO SYNC] sync hexo finish \\033[0m\"\n{% endcodeblock %}\n\n目标是每当Github有push的时候就自动调用这个脚本。\n\n然后找到Github仓库的Settings页\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/hook.png](http://7xpbfd.com1.z0.glb.clouddn.com/hook.png)\n\n添加一条Webhook，填写请求地址`http://xx.xx.xx.xx:7777/webhook`，这样每当Github收到push或者其他事件时就会自动向这个地址发送一条POST请求。\n\n下面在服务器上补充这个请求地址，我们用Node搭一个简单的http服务，这里用到了[github-webhook-handler](https://github.com/rvagg/github-webhook-handler)处理hook消息，创建文件`server.js`\n\n{% codeblock %}\nvar http = require('http')\nvar exec = require('child_process').exec;\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhook', secret: '********' });\n\nhttp.createServer(function (req, res) {\n  handler(req, res, function (err) {\n    res.statusCode = 404;\n    res.end('no such location');\n  });\n}).listen(7777);\n\nhandler.on('error', function (err) {\n  console.error('Error:', err.message);\n});\n\nhandler.on('push', function (event) {\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n  exec('/ppxu/blog/sync.sh', function(err, stdout, stderr){\n    if(err) {\n      console.log('sync server err: ' + stderr);\n    } else {\n      console.log(stdout);\n    }\n  });\n});\n{% endcodeblock %}\n\n这里的`secret`要和在Github上新建hook时设置的一样，请求时校验用的。\n\n然后启动服务\n\n{% codeblock %}\n# node server.js &\n{% endcodeblock %}\n\n这里也可以用forever之类的工具防止进程挂掉。\n\n这样一套自动部署系统就建立好了，在本机和服务器的实际效果如下：\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png](http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png)\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/sync.png](http://7xpbfd.com1.z0.glb.clouddn.com/sync.png)\n\n感觉生活一下子美好起来了呢：）\n\n#### 参考资料\n\n* [https://hexo.io/zh-cn/docs/deployment.html](https://hexo.io/zh-cn/docs/deployment.html)\n\n* [https://developer.github.com/webhooks/](https://developer.github.com/webhooks/)\n\n* [http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html](http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html)\n","source":"_posts/auto-deploy-hexo-with-github-webhooks.md","raw":"title: 使用Github的Webhooks实现Hexo的自动部署\ndate: 2015-12-21 17:29:24\ncategories: blog\ntags: [github, webhooks, hexo, deploy, shell]\n---\n博客之前的更新方式是先在本地写好文章，push到Github，然后ssh连到服务器上，再pull下来，如果每次都要这样操作一遍实在麻烦，今天就试着用Github的Webhooks功能实现了Hexo博客的自动部署，过程记录如下。\n\n<!--more-->\n\n整个过程有两个环节：\n\n### 本地代码自动部署到Github\n\nHexo本身就有deploy功能，只要在`_config.yml`里面做一下[配置](https://hexo.io/zh-cn/docs/deployment.html)，就可以部署到Github、Heroku等平台上，如果博客是托管在Github Pages上的话使用这种方式可以很方便的实现自动部署，不过通过这种方式发送到Github上的只有`public`目录，我这里希望托管整个应用的代码，就不能使用这种方式了，反正只要可以push就行了，我们搬出shell大法好。\n\n创建文件`deploy.sh`\n\n{% codeblock %}\n#!/bin/bash\n\necho -e \"\\033[32m [AUTO DEPLOY] deploy hexo start \\033[0m\"\necho -e \"\\033[32m [AUTO DEPLOY] hexo generate...  \\033[0m\"\nhexo g\necho -e \"\\033[32m [AUTO DEPLOY] git commit...  \\033[0m\"\nd=`date +%x-%T`\ngit add .\ngit commit -m \"auto deploy at \"${d}\necho -e \"\\033[32m [AUTO DEPLOY] git push...  \\033[0m\"\ngit push origin master\necho -e \"\\033[32m [AUTO DEPLOY] deploy hexo finish \\033[0m\"\n{% endcodeblock %}\n\n然后增加权限\n\n{% codeblock %}\n# chmod +x ./deploy.sh\n{% endcodeblock %}\n\n这样完成本地开发后，只要执行命令\n\n{% codeblock %}\n# ./deploy.sh\n{% endcodeblock %}\n\n就可以让Hexo生成静态文件并push到Github上。\n\n### Github自动同步到服务器\n\n为了让服务器可以自动同步Github上面的更新，我们需要用到Github的Webhooks。\n\n首先创建文件`sync.sh`\n\n{% codeblock %}\n#!/bin/bash\n\necho -e \"\\033[32m [AUTO SYNC] sync hexo start \\033[0m\"\ncd /ppxu/blog\necho -e \"\\033[32m [AUTO SYNC] git pull...  \\033[0m\"\ngit pull origin master\necho -e \"\\033[32m [AUTO SYNC] sync hexo finish \\033[0m\"\n{% endcodeblock %}\n\n目标是每当Github有push的时候就自动调用这个脚本。\n\n然后找到Github仓库的Settings页\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/hook.png](http://7xpbfd.com1.z0.glb.clouddn.com/hook.png)\n\n添加一条Webhook，填写请求地址`http://xx.xx.xx.xx:7777/webhook`，这样每当Github收到push或者其他事件时就会自动向这个地址发送一条POST请求。\n\n下面在服务器上补充这个请求地址，我们用Node搭一个简单的http服务，这里用到了[github-webhook-handler](https://github.com/rvagg/github-webhook-handler)处理hook消息，创建文件`server.js`\n\n{% codeblock %}\nvar http = require('http')\nvar exec = require('child_process').exec;\nvar createHandler = require('github-webhook-handler')\nvar handler = createHandler({ path: '/webhook', secret: '********' });\n\nhttp.createServer(function (req, res) {\n  handler(req, res, function (err) {\n    res.statusCode = 404;\n    res.end('no such location');\n  });\n}).listen(7777);\n\nhandler.on('error', function (err) {\n  console.error('Error:', err.message);\n});\n\nhandler.on('push', function (event) {\n  console.log('Received a push event for %s to %s',\n    event.payload.repository.name,\n    event.payload.ref);\n  exec('/ppxu/blog/sync.sh', function(err, stdout, stderr){\n    if(err) {\n      console.log('sync server err: ' + stderr);\n    } else {\n      console.log(stdout);\n    }\n  });\n});\n{% endcodeblock %}\n\n这里的`secret`要和在Github上新建hook时设置的一样，请求时校验用的。\n\n然后启动服务\n\n{% codeblock %}\n# node server.js &\n{% endcodeblock %}\n\n这里也可以用forever之类的工具防止进程挂掉。\n\n这样一套自动部署系统就建立好了，在本机和服务器的实际效果如下：\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png](http://7xpbfd.com1.z0.glb.clouddn.com/deploy.png)\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/sync.png](http://7xpbfd.com1.z0.glb.clouddn.com/sync.png)\n\n感觉生活一下子美好起来了呢：）\n\n#### 参考资料\n\n* [https://hexo.io/zh-cn/docs/deployment.html](https://hexo.io/zh-cn/docs/deployment.html)\n\n* [https://developer.github.com/webhooks/](https://developer.github.com/webhooks/)\n\n* [http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html](http://www.lovelucy.info/auto-deploy-website-by-webhooks-of-github-and-gitlab.html)\n","slug":"auto-deploy-hexo-with-github-webhooks","published":1,"updated":"2015-12-23T13:41:53.000Z","_id":"ciiiuswni0000dgxx6kjgx2io","comments":1,"layout":"post","photos":[],"link":""},{"title":"平滑升级nginx并配置HTTP/2","date":"2015-12-23T04:47:40.000Z","_content":"话说SPDY已经被HTTP/2上位了，网站继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，下面是操作过程\n<!--more-->\n\n1. 检查当前Nginx版本和配置参数\n\n  {% codeblock %}\n  # nginx -V\n  nginx version: nginx/1.8.0\n  built by gcc 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC)\n  built with OpenSSL 1.0.1e-fips 11 Feb 2013\n  TLS SNI support enabled\n  configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.2.2 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-http_spdy_module --with-cc-opt='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'\n  {% endcodeblock %}\n\n  记下这里的configure arguments，后面编译的时候要用的。\n\n2. 安装PCRE，Nginx的rewrite模块依赖PCRE\n\n  {% codeblock %}\n  # cd /ppxu\n  # yum -y install make zlib zlib-devel gcc-c++ libtool\n  # wget http://nchc.dl.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz\n  # tar zxvf pcre-8.37.tar.gz\n  # cd pcre-8.37/\n  # ./configure\n  # make && make install\n  {% endcodeblock %}\n\n3. 下载OpenSSL，可以从[OpenSSL](https://www.openssl.org/)或者[LibreSSL](http://www.libressl.org/)下载\n\n  {% codeblock %}\n  # cd /ppxu\n  # wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.1.tar.gz\n  # tar zxvf libressl-2.3.1.tar.gz\n  {% endcodeblock %}\n\n4. 下载，配置并编译Nginx\n\n  {% codeblock %}\n  # cd /ppxu\n  # wget http://nginx.org/download/nginx-1.9.9.tar.gz\n  # tar zxvf nginx-1.9.9.tar.gz\n  # cd nginx-1.9.9/\n  # ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.3.1 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-cc-opt='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'\n  # make\n  {% endcodeblock %}\n\n  其中的`--with-http_v2_module`就是开启HTTP/2的设置。\n\n5. 替换Nginx\n\n  {% codeblock %}\n  # which nginx    //查找nginx路径\n  # mv /usr/sbin/nginx /usr/sbin/nginx.old    //备份旧版nginx\n  # cp objs/nginx /usr/sbin/    //将编译好的新版nginx复制过去\n  {% endcodeblock %}\n\n6. 确认更新生效\n\n  {% codeblock %}\n  # /usr/sbin/nginx -t\n  nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n  nginx: configuration file /etc/nginx/nginx.conf test is successful\n  # /usr/sbin/nginx -v\n  nginx version: nginx/1.9.9\n  {% endcodeblock %}\n\n7. 更新Nginx配置文件\n\n  {% codeblock %}\n  server {\n      listen       80;\n      listen       443 ssl http2;\n      server_name  ppxu.me *.ppxu.me;\n\n      ...\n  {% endcodeblock %}\n\n8. 重启Nginx即可\n\n访问网站，在响应头里可以看到`server:nginx/1.9.9`，同时，在[chrome://net-internals/#http2](chrome://net-internals/#http2)上面可以看到网站已经支持了HTTP/2\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/http2.png](http://7xpbfd.com1.z0.glb.clouddn.com/http2.png)\n\n#### 参考资料\n\n* [http://www.linuxde.net/2011/08/554.html](http://www.linuxde.net/2011/08/554.html)\n* [http://www.linuxidc.com/Linux/2014-02/96137.htm](http://www.linuxidc.com/Linux/2014-02/96137.htm)\n* [http://www.poluoluo.com/server/201403/265778.html](http://www.poluoluo.com/server/201403/265778.html)\n* [https://imququ.com/post/http2-resource.html](https://imququ.com/post/http2-resource.html)\n* [https://imququ.com/post/nginx-http2-patch.html](https://imququ.com/post/nginx-http2-patch.html)\n* [http://www.tuicool.com/articles/3eeIVfi](http://www.tuicool.com/articles/3eeIVfi)\n","source":"_posts/nginx-smooth-upgrade-and-config-http2.md","raw":"title: 平滑升级nginx并配置HTTP/2\ndate: 2015-12-23 12:47:40\ncategories: blog\ntags: [aliyun, ecs, centos, nginx, http2]\n---\n话说SPDY已经被HTTP/2上位了，网站继续用SPDY也不合适，今天就趁空升级了最新的Nginx，并开启了HTTP/2，下面是操作过程\n<!--more-->\n\n1. 检查当前Nginx版本和配置参数\n\n  {% codeblock %}\n  # nginx -V\n  nginx version: nginx/1.8.0\n  built by gcc 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC)\n  built with OpenSSL 1.0.1e-fips 11 Feb 2013\n  TLS SNI support enabled\n  configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.2.2 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-http_spdy_module --with-cc-opt='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'\n  {% endcodeblock %}\n\n  记下这里的configure arguments，后面编译的时候要用的。\n\n2. 安装PCRE，Nginx的rewrite模块依赖PCRE\n\n  {% codeblock %}\n  # cd /ppxu\n  # yum -y install make zlib zlib-devel gcc-c++ libtool\n  # wget http://nchc.dl.sourceforge.net/project/pcre/pcre/8.37/pcre-8.37.tar.gz\n  # tar zxvf pcre-8.37.tar.gz\n  # cd pcre-8.37/\n  # ./configure\n  # make && make install\n  {% endcodeblock %}\n\n3. 下载OpenSSL，可以从[OpenSSL](https://www.openssl.org/)或者[LibreSSL](http://www.libressl.org/)下载\n\n  {% codeblock %}\n  # cd /ppxu\n  # wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.3.1.tar.gz\n  # tar zxvf libressl-2.3.1.tar.gz\n  {% endcodeblock %}\n\n4. 下载，配置并编译Nginx\n\n  {% codeblock %}\n  # cd /ppxu\n  # wget http://nginx.org/download/nginx-1.9.9.tar.gz\n  # tar zxvf nginx-1.9.9.tar.gz\n  # cd nginx-1.9.9/\n  # ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-openssl=../libressl-2.3.1 --with-http_v2_module --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_stub_status_module --with-http_auth_request_module --with-mail --with-mail_ssl_module --with-file-aio --with-ipv6 --with-cc-opt='-O2 -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic'\n  # make\n  {% endcodeblock %}\n\n  其中的`--with-http_v2_module`就是开启HTTP/2的设置。\n\n5. 替换Nginx\n\n  {% codeblock %}\n  # which nginx    //查找nginx路径\n  # mv /usr/sbin/nginx /usr/sbin/nginx.old    //备份旧版nginx\n  # cp objs/nginx /usr/sbin/    //将编译好的新版nginx复制过去\n  {% endcodeblock %}\n\n6. 确认更新生效\n\n  {% codeblock %}\n  # /usr/sbin/nginx -t\n  nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\n  nginx: configuration file /etc/nginx/nginx.conf test is successful\n  # /usr/sbin/nginx -v\n  nginx version: nginx/1.9.9\n  {% endcodeblock %}\n\n7. 更新Nginx配置文件\n\n  {% codeblock %}\n  server {\n      listen       80;\n      listen       443 ssl http2;\n      server_name  ppxu.me *.ppxu.me;\n\n      ...\n  {% endcodeblock %}\n\n8. 重启Nginx即可\n\n访问网站，在响应头里可以看到`server:nginx/1.9.9`，同时，在[chrome://net-internals/#http2](chrome://net-internals/#http2)上面可以看到网站已经支持了HTTP/2\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/http2.png](http://7xpbfd.com1.z0.glb.clouddn.com/http2.png)\n\n#### 参考资料\n\n* [http://www.linuxde.net/2011/08/554.html](http://www.linuxde.net/2011/08/554.html)\n* [http://www.linuxidc.com/Linux/2014-02/96137.htm](http://www.linuxidc.com/Linux/2014-02/96137.htm)\n* [http://www.poluoluo.com/server/201403/265778.html](http://www.poluoluo.com/server/201403/265778.html)\n* [https://imququ.com/post/http2-resource.html](https://imququ.com/post/http2-resource.html)\n* [https://imququ.com/post/nginx-http2-patch.html](https://imququ.com/post/nginx-http2-patch.html)\n* [http://www.tuicool.com/articles/3eeIVfi](http://www.tuicool.com/articles/3eeIVfi)\n","slug":"nginx-smooth-upgrade-and-config-http2","published":1,"updated":"2015-12-23T13:45:11.000Z","_id":"ciiiuswny000ddgxxospnjnn6","comments":1,"layout":"post","photos":[],"link":""},{"title":"阿里云ECS搭建hexo","date":"2015-12-19T02:31:27.000Z","_content":"最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。\n\n<!--more-->\n\n撸主选的是最便宜的阿里云ECS，应付日常小撸应该足够了，具体配置如下：\n\n{% codeblock %}\nCPU：1核\n内存：1024MB\n操作系统：CentOS 7.0 64位\n带宽：1Mbps\n{% endcodeblock %}\n\n下面是具体的手法：\n\n* 连接服务器\n\n{% codeblock %}\n# ssh root@xx.xx.xx.xx\n{% endcodeblock %}\n\n* 安装Nodejs环境\n\n  * 更新软件源\n\n  {% codeblock %}\n  # yum -y update\n  {% endcodeblock %}\n\n  * 下载Node.js\n\n  {% codeblock %}\n  # cd /usr/local/src\n  # wget http://nodejs.org/dist/node-latest.tar.gz\n  {% endcodeblock %}\n\n  * 解压\n\n  {% codeblock %}\n  # tar zxf node-latest.tar.gz\n  # cd node-v*.*.*\n  {% endcodeblock %}\n\n  * 编译安装\n\n  {% codeblock %}\n  # ./configure\n  # make && make install\n  {% endcodeblock %}\n\n  * 确认安装成功\n\n  {% codeblock %}\n  # node -v\n  # npm -v\n  {% endcodeblock %}\n\n* 安装Hexo\n\n{% codeblock %}\n# npm install -g hexo-cli\n# hexo init blog\n# cd blog\n# npm install\n{% endcodeblock %}\n\n* 启动Hexo\n\n{% codeblock %}\n# hexo server    //普通启动\n# hexo server &  //静默启动\n{% endcodeblock %}\n\n启动成功后就可以通过服务器的ip地址`xx.xx.xx.xx:4000`访问到页面了，然后需要把4000转到80上，通常做法是用Nginx做反向代理，这里先用iptables防火墙简单做一下转发处理。\n\n* 转到80端口\n\n编辑iptables文件\n\n{% codeblock %}\n# vi /etc/sysconfig/iptables\n{% endcodeblock %}\n\n加上下面这段\n\n{% codeblock %}\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 4000 -j ACCEPT\n\n*nat\n-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 4000\nCOMMIT\n{% endcodeblock %}\n\n重启iptables服务\n\n{% codeblock %}\n# service iptables restart\n{% endcodeblock %}\n\n这时发现报错了\n\n{% codeblock %}\nFailed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.\n{% endcodeblock %}\n\n查了一下原来是CentOS 7中的防火墙改成了firewalld，所以要换回iptables。\n\n{% codeblock %}\n# systemctl stop firewalld\n# systemctl mask firewalld\n# yum install iptables-services\n# systemctl enable iptables\n# service start iptables\n{% endcodeblock %}\n\n这样就可以通过ip地址`xx.xx.xx.xx`直接访问网站了。\n\n* 域名解析\n\n再撸个域名`ppxu.me`，把`@`和`www`都解析到服务器ip地址就可以了。\n\n* git管理\n\n再配置一下git环境，以后就可以通过git来管理内容了。\n\n#### 参考资料\n\n* [https://hexo.io/zh-cn/docs/index.html](https://hexo.io/zh-cn/docs/index.html)\n* [http://wsgzao.github.io/post/hexo-guide/](http://wsgzao.github.io/post/hexo-guide/)\n* [http://zipperary.com/categories/hexo/](http://zipperary.com/categories/hexo/)\n* [http://www.jianshu.com/p/73779eacb494](http://www.jianshu.com/p/73779eacb494)\n* [http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/](http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/)\n* [http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/](http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/)\n* [http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/](http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/)\n* [http://www.vkilo.com/rhel-7-iptables-service.html](http://www.vkilo.com/rhel-7-iptables-service.html)\n","source":"_posts/install-nodejs-and-hexo-in-aliyun-centos.md","raw":"title: 阿里云ECS搭建hexo\ndate: 2015-12-19 10:31:27\ncategories: blog\ntags: [aliyun, ecs, centos, nodejs, hexo]\n---\n最近刚撸了个阿里云ECS服务器来折腾，先搭个Hexo博客耍耍，这里记录一下操作步骤。\n\n<!--more-->\n\n撸主选的是最便宜的阿里云ECS，应付日常小撸应该足够了，具体配置如下：\n\n{% codeblock %}\nCPU：1核\n内存：1024MB\n操作系统：CentOS 7.0 64位\n带宽：1Mbps\n{% endcodeblock %}\n\n下面是具体的手法：\n\n* 连接服务器\n\n{% codeblock %}\n# ssh root@xx.xx.xx.xx\n{% endcodeblock %}\n\n* 安装Nodejs环境\n\n  * 更新软件源\n\n  {% codeblock %}\n  # yum -y update\n  {% endcodeblock %}\n\n  * 下载Node.js\n\n  {% codeblock %}\n  # cd /usr/local/src\n  # wget http://nodejs.org/dist/node-latest.tar.gz\n  {% endcodeblock %}\n\n  * 解压\n\n  {% codeblock %}\n  # tar zxf node-latest.tar.gz\n  # cd node-v*.*.*\n  {% endcodeblock %}\n\n  * 编译安装\n\n  {% codeblock %}\n  # ./configure\n  # make && make install\n  {% endcodeblock %}\n\n  * 确认安装成功\n\n  {% codeblock %}\n  # node -v\n  # npm -v\n  {% endcodeblock %}\n\n* 安装Hexo\n\n{% codeblock %}\n# npm install -g hexo-cli\n# hexo init blog\n# cd blog\n# npm install\n{% endcodeblock %}\n\n* 启动Hexo\n\n{% codeblock %}\n# hexo server    //普通启动\n# hexo server &  //静默启动\n{% endcodeblock %}\n\n启动成功后就可以通过服务器的ip地址`xx.xx.xx.xx:4000`访问到页面了，然后需要把4000转到80上，通常做法是用Nginx做反向代理，这里先用iptables防火墙简单做一下转发处理。\n\n* 转到80端口\n\n编辑iptables文件\n\n{% codeblock %}\n# vi /etc/sysconfig/iptables\n{% endcodeblock %}\n\n加上下面这段\n\n{% codeblock %}\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT\n-A INPUT -m state --state NEW -m tcp -p tcp --dport 4000 -j ACCEPT\n\n*nat\n-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 4000\nCOMMIT\n{% endcodeblock %}\n\n重启iptables服务\n\n{% codeblock %}\n# service iptables restart\n{% endcodeblock %}\n\n这时发现报错了\n\n{% codeblock %}\nFailed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.\n{% endcodeblock %}\n\n查了一下原来是CentOS 7中的防火墙改成了firewalld，所以要换回iptables。\n\n{% codeblock %}\n# systemctl stop firewalld\n# systemctl mask firewalld\n# yum install iptables-services\n# systemctl enable iptables\n# service start iptables\n{% endcodeblock %}\n\n这样就可以通过ip地址`xx.xx.xx.xx`直接访问网站了。\n\n* 域名解析\n\n再撸个域名`ppxu.me`，把`@`和`www`都解析到服务器ip地址就可以了。\n\n* git管理\n\n再配置一下git环境，以后就可以通过git来管理内容了。\n\n#### 参考资料\n\n* [https://hexo.io/zh-cn/docs/index.html](https://hexo.io/zh-cn/docs/index.html)\n* [http://wsgzao.github.io/post/hexo-guide/](http://wsgzao.github.io/post/hexo-guide/)\n* [http://zipperary.com/categories/hexo/](http://zipperary.com/categories/hexo/)\n* [http://www.jianshu.com/p/73779eacb494](http://www.jianshu.com/p/73779eacb494)\n* [http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/](http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/)\n* [http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/](http://codybonney.com/installing-node-js-0-10-24-on-centos-6-4/)\n* [http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/](http://codybonney.com/redirect-port-80-to-another-port-using-iptables-on-centos/)\n* [http://www.vkilo.com/rhel-7-iptables-service.html](http://www.vkilo.com/rhel-7-iptables-service.html)\n","slug":"install-nodejs-and-hexo-in-aliyun-centos","published":1,"updated":"2015-12-23T13:44:22.000Z","_id":"ciiiuswo4000pdgxxwz7ajmal","comments":1,"layout":"post","photos":[],"link":""},{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2015-12-18T14:31:17.000Z","updated":"2015-12-18T14:31:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciiiuswoa000xdgxx5tbewu2x"},{"title":"阿里云ECS配置nginx和ssl","date":"2015-12-20T14:01:05.000Z","_content":"今天给服务器安装了Nginx，并配置了SSL，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。\n\n<!--more-->\n\n先是安装Nginx\n\n{% codeblock %}\n# wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n# rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm\n# yum install nginx\n{% endcodeblock %}\n\n启动Nginx\n\n{% codeblock %}\n# systemctl start nginx\n{% endcodeblock %}\n\n这样Nginx服务就已经可以访问了，输入服务器ip地址就可以看到Nginx主页，然后我们需要把Hexo服务的4000端口转发到Nginx的80端口，查看Nginx配置文件`/etc/nginx/nginx.conf`，看到需要修改`conf.d`目录下的`/etc/nginx/conf.d/default.conf`文件\n\n{% codeblock %}\nserver {\n    listen       80;\n    server_name  ppxu.me *.ppxu.me;\n\n    location / {\n        proxy_pass          http://127.0.0.1:4000/;\n        proxy_redirect      off;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    ...\n{% endcodeblock %}\n\n重启Nginx\n\n{% codeblock %}\n# systemctl restart nginx\n{% endcodeblock %}\n\n现在访问网站，在响应头里就可以看到`Server:nginx/1.8.0`，说明Nginx环境已经正常了，下面准备搞上HTTPS。\n\n这里就不详述HTTPS的原理了，对我们这个小博客而言，搞个免费的SSL证书就可以了，这里推荐[https://startssl.com/](https://startssl.com/)或者[https://www.wosign.com/](https://www.wosign.com/)，申请成功后把下载下来的对应版本的证书文件上传到服务器上，包含公钥`.crt`和私钥`.key`。\n\n然后编辑`/etc/nginx/conf.d/default.conf`\n\n{% codeblock %}\nserver {\n    listen       80;\n    listen       443 ssl;\n    server_name  ppxu.me *.ppxu.me;\n\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/ppxu.crt;\n    ssl_certificate_key /etc/nginx/conf.d/ppxu.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    location / {\n        proxy_pass          http://127.0.0.1:4000/;\n        proxy_redirect      off;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    ...\n{% endcodeblock %}\n\n重启Nginx，如果一切顺利，现在就可以通过`https://ppxu.me`访问到本网站了，但是直接如果直接输入`ppxu.me`的话会报400错误，显示\n\n{% codeblock %}\nThe plain HTTP request was sent to HTTPS port\n{% endcodeblock %}\n\n所以我们需要将http的请求强制使用https访问，最方便的办法是启用HSTS，在nginx的配置中添加\n\n{% codeblock %}\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubdomains\";\n{% endcodeblock %}\n\n这样只要是支持HSTS的浏览器，就可以自动完成http到https的替换，而且是直接在浏览器本地完成的，对于不支持的浏览器，只能在服务器做重定向了，继续在Nginx配置中添加一条规则\n\n{% codeblock %}\nerror_page 497  https://$host$uri;\n{% endcodeblock %}\n\n这样我们的网站就已经完全支持了HTTPS访问，可以在这个网站[https://www.ssllabs.com/ssltest/analyze.html](https://www.ssllabs.com/ssltest/analyze.html)对网页进行安全评测，如果评分不够高的话可以再看看如何[加强nginx的SSL安全](http://www.oschina.net/translate/strong_ssl_security_on_nginx)。\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png](http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png)\n\n#### 参考资料\n\n* [http://codybonney.com/installing-nginx-on-centos-6-4/](http://codybonney.com/installing-nginx-on-centos-6-4/)\n* [http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/](http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/)\n* [http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/](http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/)\n* [https://imququ.com/post/switch-to-https.html](https://imququ.com/post/switch-to-https.html)\n* [https://imququ.com/post/sth-about-switch-to-https.html](https://imququ.com/post/sth-about-switch-to-https.html)\n* [http://www.ha97.com/5194.html](http://www.ha97.com/5194.html)\n* [http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html](http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html)\n* [http://www.codeceo.com/article/nginx-ssl-nodejs.html](http://www.codeceo.com/article/nginx-ssl-nodejs.html)\n* [http://www.ttlsa.com/nginx/nginx-node-js/](http://www.ttlsa.com/nginx/nginx-node-js/)\n* [http://blog.csdn.net/wzy_1988/article/details/8549290](http://blog.csdn.net/wzy_1988/article/details/8549290)\n* [http://www.tutugreen.com/wordpress/upgrade-ssl/](http://www.tutugreen.com/wordpress/upgrade-ssl/)\n* [http://www.oschina.net/translate/strong_ssl_security_on_nginx](http://www.oschina.net/translate/strong_ssl_security_on_nginx)\n* [http://blog.jobbole.com/44844/](http://blog.jobbole.com/44844/)\n* [http://blog.jobbole.com/80591/](http://blog.jobbole.com/80591/)\n* [https://imququ.com/post/my-nginx-conf-for-wpo.html](https://imququ.com/post/my-nginx-conf-for-wpo.html)\n","source":"_posts/config-ssl-in-nginx.md","raw":"title: 阿里云ECS配置nginx和ssl\ndate: 2015-12-20 22:01:05\ncategories: blog\ntags: [aliyun, ecs, centos, nginx, ssl, https]\n---\n今天给服务器安装了Nginx，并配置了SSL，网址左边终于有萌萌哒的小绿锁了，这里还是做一下记录。\n\n<!--more-->\n\n先是安装Nginx\n\n{% codeblock %}\n# wget http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n# rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm\n# yum install nginx\n{% endcodeblock %}\n\n启动Nginx\n\n{% codeblock %}\n# systemctl start nginx\n{% endcodeblock %}\n\n这样Nginx服务就已经可以访问了，输入服务器ip地址就可以看到Nginx主页，然后我们需要把Hexo服务的4000端口转发到Nginx的80端口，查看Nginx配置文件`/etc/nginx/nginx.conf`，看到需要修改`conf.d`目录下的`/etc/nginx/conf.d/default.conf`文件\n\n{% codeblock %}\nserver {\n    listen       80;\n    server_name  ppxu.me *.ppxu.me;\n\n    location / {\n        proxy_pass          http://127.0.0.1:4000/;\n        proxy_redirect      off;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    ...\n{% endcodeblock %}\n\n重启Nginx\n\n{% codeblock %}\n# systemctl restart nginx\n{% endcodeblock %}\n\n现在访问网站，在响应头里就可以看到`Server:nginx/1.8.0`，说明Nginx环境已经正常了，下面准备搞上HTTPS。\n\n这里就不详述HTTPS的原理了，对我们这个小博客而言，搞个免费的SSL证书就可以了，这里推荐[https://startssl.com/](https://startssl.com/)或者[https://www.wosign.com/](https://www.wosign.com/)，申请成功后把下载下来的对应版本的证书文件上传到服务器上，包含公钥`.crt`和私钥`.key`。\n\n然后编辑`/etc/nginx/conf.d/default.conf`\n\n{% codeblock %}\nserver {\n    listen       80;\n    listen       443 ssl;\n    server_name  ppxu.me *.ppxu.me;\n\n    ssl on;\n    ssl_certificate /etc/nginx/conf.d/ppxu.crt;\n    ssl_certificate_key /etc/nginx/conf.d/ppxu.key;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers 'AES128+EECDH:AES128+EDH:!aNULL';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    location / {\n        proxy_pass          http://127.0.0.1:4000/;\n        proxy_redirect      off;\n        proxy_set_header    X-Real-IP       $remote_addr;\n        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    ...\n{% endcodeblock %}\n\n重启Nginx，如果一切顺利，现在就可以通过`https://ppxu.me`访问到本网站了，但是直接如果直接输入`ppxu.me`的话会报400错误，显示\n\n{% codeblock %}\nThe plain HTTP request was sent to HTTPS port\n{% endcodeblock %}\n\n所以我们需要将http的请求强制使用https访问，最方便的办法是启用HSTS，在nginx的配置中添加\n\n{% codeblock %}\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubdomains\";\n{% endcodeblock %}\n\n这样只要是支持HSTS的浏览器，就可以自动完成http到https的替换，而且是直接在浏览器本地完成的，对于不支持的浏览器，只能在服务器做重定向了，继续在Nginx配置中添加一条规则\n\n{% codeblock %}\nerror_page 497  https://$host$uri;\n{% endcodeblock %}\n\n这样我们的网站就已经完全支持了HTTPS访问，可以在这个网站[https://www.ssllabs.com/ssltest/analyze.html](https://www.ssllabs.com/ssltest/analyze.html)对网页进行安全评测，如果评分不够高的话可以再看看如何[加强nginx的SSL安全](http://www.oschina.net/translate/strong_ssl_security_on_nginx)。\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png](http://7xpbfd.com1.z0.glb.clouddn.com/ssl.png)\n\n#### 参考资料\n\n* [http://codybonney.com/installing-nginx-on-centos-6-4/](http://codybonney.com/installing-nginx-on-centos-6-4/)\n* [http://www.tuijiankan.com/2015/05/04/阿里云Centos6安装配置Nodejs、Nginx、Hexo操作记录/](http://www.tuijiankan.com/2015/05/04/%E9%98%BF%E9%87%8C%E4%BA%91Centos6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AENodejs%E3%80%81Nginx%E3%80%81Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/)\n* [http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/](http://www.barretlee.com/blog/2015/10/05/how-to-build-a-https-server/)\n* [https://imququ.com/post/switch-to-https.html](https://imququ.com/post/switch-to-https.html)\n* [https://imququ.com/post/sth-about-switch-to-https.html](https://imququ.com/post/sth-about-switch-to-https.html)\n* [http://www.ha97.com/5194.html](http://www.ha97.com/5194.html)\n* [http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html](http://www.cnblogs.com/yanghuahui/archive/2012/06/25/2561568.html)\n* [http://www.codeceo.com/article/nginx-ssl-nodejs.html](http://www.codeceo.com/article/nginx-ssl-nodejs.html)\n* [http://www.ttlsa.com/nginx/nginx-node-js/](http://www.ttlsa.com/nginx/nginx-node-js/)\n* [http://blog.csdn.net/wzy_1988/article/details/8549290](http://blog.csdn.net/wzy_1988/article/details/8549290)\n* [http://www.tutugreen.com/wordpress/upgrade-ssl/](http://www.tutugreen.com/wordpress/upgrade-ssl/)\n* [http://www.oschina.net/translate/strong_ssl_security_on_nginx](http://www.oschina.net/translate/strong_ssl_security_on_nginx)\n* [http://blog.jobbole.com/44844/](http://blog.jobbole.com/44844/)\n* [http://blog.jobbole.com/80591/](http://blog.jobbole.com/80591/)\n* [https://imququ.com/post/my-nginx-conf-for-wpo.html](https://imququ.com/post/my-nginx-conf-for-wpo.html)\n","slug":"config-ssl-in-nginx","published":1,"updated":"2015-12-23T13:43:51.000Z","_id":"ciiiuswod000ydgxx3nc0anpx","comments":1,"layout":"post","photos":[],"link":""},{"title":"nginx配置SPDY","date":"2015-12-22T09:32:20.000Z","_content":"本来准备给服务器搞个HTTP/2上去，发现nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级nginx和HTTP/2。\n\n<!--more-->\n\n首先查看一下本地的Nginx是不是已经包含了SPDY\n\n{% codeblock %}\n# nginx -V |grep spdy\n{% endcodeblock %}\n\n如果看到有`–-with-http_spdy_module`，就说明已经支持了SPDY，如果没有的话需要重新下载和编译Nginx，在编译的时候加上`--with-http_spdy_module`选项。\n\n然后修改Nginx的配置文件\n\n{% codeblock %}\nserver {\n    listen       80;\n    listen       443 ssl spdy;\n    server_name  ppxu.me *.ppxu.me;\n\n    add_header   Alternate-Protocol  443:npn-spdy/3.1;\n    ...\n{% endcodeblock %}\n\n重启Nginx，SPDY就启动成功了。\n\n访问网站，然后在chrome中打开`chrome://net-internals/#http2`，就可以看到站点已经支持了SPDY3.1\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png](http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png)\n\n还可以在这个[网站](https://spdycheck.org/)检查SPDY启动情况。\n\n不过SPDY协议已经废弃了，还是赶紧搞上HTTP/2才是正事。\n\n#### 参考资料\n\n* [http://nginx.org/](http://nginx.org/)\n\n* [http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/](http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/)\n\n* [http://www.linuxidc.com/Linux/2015-09/123251.htm](http://www.linuxidc.com/Linux/2015-09/123251.htm)\n\n* [http://www.linuxidc.com/Linux/2015-02/112979.htm](http://www.linuxidc.com/Linux/2015-02/112979.htm)\n\n* [http://www.jb51.net/article/59017.htm](http://www.jb51.net/article/59017.htm)\n\n* [http://www.tuicool.com/articles/2mi63q](http://www.tuicool.com/articles/2mi63q)\n","source":"_posts/config-spdy-in-nginx.md","raw":"title: nginx配置SPDY\ndate: 2015-12-22 17:32:20\ncategories: blog\ntags: [aliyun, ecs, centos, nginx, spdy]\n---\n本来准备给服务器搞个HTTP/2上去，发现nginx要到1.9.5才可以支持HTTP/2协议，现在服务器上的nginx版本才1.8.0，想了想先试试SPDY吧，改天再来升级nginx和HTTP/2。\n\n<!--more-->\n\n首先查看一下本地的Nginx是不是已经包含了SPDY\n\n{% codeblock %}\n# nginx -V |grep spdy\n{% endcodeblock %}\n\n如果看到有`–-with-http_spdy_module`，就说明已经支持了SPDY，如果没有的话需要重新下载和编译Nginx，在编译的时候加上`--with-http_spdy_module`选项。\n\n然后修改Nginx的配置文件\n\n{% codeblock %}\nserver {\n    listen       80;\n    listen       443 ssl spdy;\n    server_name  ppxu.me *.ppxu.me;\n\n    add_header   Alternate-Protocol  443:npn-spdy/3.1;\n    ...\n{% endcodeblock %}\n\n重启Nginx，SPDY就启动成功了。\n\n访问网站，然后在chrome中打开`chrome://net-internals/#http2`，就可以看到站点已经支持了SPDY3.1\n\n![http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png](http://7xpbfd.com1.z0.glb.clouddn.com/spdy.png)\n\n还可以在这个[网站](https://spdycheck.org/)检查SPDY启动情况。\n\n不过SPDY协议已经废弃了，还是赶紧搞上HTTP/2才是正事。\n\n#### 参考资料\n\n* [http://nginx.org/](http://nginx.org/)\n\n* [http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/](http://www.stefanwille.com/2013/04/using-spdy-with-nginx-1-4/)\n\n* [http://www.linuxidc.com/Linux/2015-09/123251.htm](http://www.linuxidc.com/Linux/2015-09/123251.htm)\n\n* [http://www.linuxidc.com/Linux/2015-02/112979.htm](http://www.linuxidc.com/Linux/2015-02/112979.htm)\n\n* [http://www.jb51.net/article/59017.htm](http://www.jb51.net/article/59017.htm)\n\n* [http://www.tuicool.com/articles/2mi63q](http://www.tuicool.com/articles/2mi63q)\n","slug":"config-spdy-in-nginx","published":1,"updated":"2015-12-23T13:42:37.000Z","_id":"ciiiuswol0018dgxxchd0n8hj","comments":1,"layout":"post","photos":[],"link":""}],"PostAsset":[],"PostCategory":[{"post_id":"ciiiuswni0000dgxx6kjgx2io","category_id":"ciiiuswnp0001dgxxkxt64fl6","_id":"ciiivhn140000ttxxf3f96n3o"},{"post_id":"ciiiuswny000ddgxxospnjnn6","category_id":"ciiiuswnp0001dgxxkxt64fl6","_id":"ciiivhn1b0001ttxx9mju6l4c"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","category_id":"ciiiuswnp0001dgxxkxt64fl6","_id":"ciiivhn1f0002ttxxppcpjv2t"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","category_id":"ciiiuswnp0001dgxxkxt64fl6","_id":"ciiivhn1j0003ttxxe163zlz9"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","category_id":"ciiiuswnp0001dgxxkxt64fl6","_id":"ciiivhn1q0004ttxxrw9thi7t"}],"PostTag":[{"post_id":"ciiiuswni0000dgxx6kjgx2io","tag_id":"ciiiuswnp0002dgxxcg9k35ec","_id":"ciiiuswnv0008dgxx3rcr4g0i"},{"post_id":"ciiiuswni0000dgxx6kjgx2io","tag_id":"ciiiuswns0003dgxxlypp9e3q","_id":"ciiiuswnw0009dgxxzpnw5c7d"},{"post_id":"ciiiuswni0000dgxx6kjgx2io","tag_id":"ciiiuswnt0005dgxxgkei20ux","_id":"ciiiuswnw000adgxx4i06sgvz"},{"post_id":"ciiiuswni0000dgxx6kjgx2io","tag_id":"ciiiuswnu0006dgxxnjctgjjc","_id":"ciiiuswnw000bdgxx701wkjgg"},{"post_id":"ciiiuswni0000dgxx6kjgx2io","tag_id":"ciiiuswnv0007dgxxap6uu2g8","_id":"ciiiuswnw000cdgxx6tw6y5s0"},{"post_id":"ciiiuswny000ddgxxospnjnn6","tag_id":"ciiiuswo0000fdgxxg8x5mqai","_id":"ciiiuswo2000kdgxxdtrbspmh"},{"post_id":"ciiiuswny000ddgxxospnjnn6","tag_id":"ciiiuswo1000gdgxx5bi14dmg","_id":"ciiiuswo2000ldgxxv7nhb409"},{"post_id":"ciiiuswny000ddgxxospnjnn6","tag_id":"ciiiuswo1000hdgxxpqivrlof","_id":"ciiiuswo3000mdgxx0bwnpdbv"},{"post_id":"ciiiuswny000ddgxxospnjnn6","tag_id":"ciiiuswo1000idgxx820nsbfv","_id":"ciiiuswo3000ndgxx8ek06y7a"},{"post_id":"ciiiuswny000ddgxxospnjnn6","tag_id":"ciiiuswo1000jdgxxafdqgu4k","_id":"ciiiuswo3000odgxxtxk5uhqo"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","tag_id":"ciiiuswo0000fdgxxg8x5mqai","_id":"ciiiuswo7000sdgxxly1lxqlj"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","tag_id":"ciiiuswo1000gdgxx5bi14dmg","_id":"ciiiuswo7000tdgxxijsddggb"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","tag_id":"ciiiuswo1000hdgxxpqivrlof","_id":"ciiiuswo7000udgxxno8wi0p8"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","tag_id":"ciiiuswo6000rdgxxku0p73vf","_id":"ciiiuswo8000vdgxxt5q3ud3y"},{"post_id":"ciiiuswo4000pdgxxwz7ajmal","tag_id":"ciiiuswnt0005dgxxgkei20ux","_id":"ciiiuswo8000wdgxxj6rxb30f"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswo0000fdgxxg8x5mqai","_id":"ciiiuswog0012dgxxa9iw1kff"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswo1000gdgxx5bi14dmg","_id":"ciiiuswoj0013dgxxzfo5x19q"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswo1000hdgxxpqivrlof","_id":"ciiiuswoj0014dgxx70gqds8n"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswo1000idgxx820nsbfv","_id":"ciiiuswoj0015dgxxjdyi1qkc"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswof0010dgxx7ef3lcqh","_id":"ciiiuswoj0016dgxxc8lglhqj"},{"post_id":"ciiiuswod000ydgxx3nc0anpx","tag_id":"ciiiuswog0011dgxxn0tttndf","_id":"ciiiuswoj0017dgxxa3yyo90e"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","tag_id":"ciiiuswo0000fdgxxg8x5mqai","_id":"ciiiuswon001bdgxxbmjpzmtk"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","tag_id":"ciiiuswo1000gdgxx5bi14dmg","_id":"ciiiuswon001cdgxxl43pmnze"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","tag_id":"ciiiuswo1000hdgxxpqivrlof","_id":"ciiiuswon001ddgxxzvb5p1ia"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","tag_id":"ciiiuswo1000idgxx820nsbfv","_id":"ciiiuswon001edgxxzhgo4ru1"},{"post_id":"ciiiuswol0018dgxxchd0n8hj","tag_id":"ciiiuswom001adgxxvpk5kzjg","_id":"ciiiuswon001fdgxxr4yibcug"}],"Tag":[{"name":"github","_id":"ciiiuswnp0002dgxxcg9k35ec"},{"name":"webhooks","_id":"ciiiuswns0003dgxxlypp9e3q"},{"name":"hexo","_id":"ciiiuswnt0005dgxxgkei20ux"},{"name":"deploy","_id":"ciiiuswnu0006dgxxnjctgjjc"},{"name":"shell","_id":"ciiiuswnv0007dgxxap6uu2g8"},{"name":"aliyun","_id":"ciiiuswo0000fdgxxg8x5mqai"},{"name":"ecs","_id":"ciiiuswo1000gdgxx5bi14dmg"},{"name":"centos","_id":"ciiiuswo1000hdgxxpqivrlof"},{"name":"nginx","_id":"ciiiuswo1000idgxx820nsbfv"},{"name":"http2","_id":"ciiiuswo1000jdgxxafdqgu4k"},{"name":"nodejs","_id":"ciiiuswo6000rdgxxku0p73vf"},{"name":"ssl","_id":"ciiiuswof0010dgxx7ef3lcqh"},{"name":"https","_id":"ciiiuswog0011dgxxn0tttndf"},{"name":"spdy","_id":"ciiiuswom001adgxxvpk5kzjg"}]}}